/***
 * Module CollectAtStore
 * Handles Collect@Store popup functionality.
 */
Site.CollectAtStore = (function (window, S, out, $) {

	var _$popupMain; // Will hold the element with id #popup-main.
	var _isLoaded; // TODO: Is this really needed?
	var _$storeList    = {}; // Object that will hold a clone of the list of stores.
	var _itemInBasket  = false; // Check on popup open if user has other items in basket
	var _accessoryArray= []; // Have to hold accessory products in an array
	var _hasAccessory  = false; // BOOL to check if accessory is in basket to check quantity of
	var _initialized = false; // Flag to determine if the popup has just have been opened.
	var _addedInsurance = false; // Flag to determine if insurance added to popup and where to show
	var _showMoreStores = []; // Global store holder to add more stores in popup listing
	var storeMaxURL = 'CC_ViewCollectAtStore-GetHighestProductStock';
	var $priceQuantityWrap = $('.price-quantity-wrap');

	/**
     * Options that can be set from the outside.
     */
    var _DEFAULTS = {
		secureHost : true, // Fetch API over HTTPS?
        authToken : 'client=gme-dsgretaillimited2', // Key to use in production.
        storeMarkers : [], // Will contain stores from the ISML, generated by IS7.
        country : false, // Generated by IS7 in the ISML template.
        countryCode : '', // Generated by IS7 in the ISML template.
        languageCode : 'en', // Gets overwritten by IS7 in the ISML template.        
    };
    
    // We don't want to tamper with the defaults, so we copy them to this settings var instead.
    var _s = _DEFAULTS,   
    	_currentGooglePosition,    
    	_googleMapsCallback,
    	_gm, // google.maps shortcut alias.    
    	_geocoder; // The Geo Coder service.
	
    
    var _userInfo = {
            name : '',
            phone: '',
            email: ''
    };
    
    var checkIfPopup = function() {
        
        if ($('.collect-at-store-popup-content').length) {
            S.Popup.checkHeight();
        }
        
    };
    
    var checkUserInput = function(input) {
        
        return $('input[name=CollectAtStoreForm_' + input +']');
    };
    
    // When the page reloads we need a way to hold on to data that has been input by a user.
    // TODO : Are JS Objects persisted across page reload?
    // TODO : Can we solve only using C@S JS file?
    // Areas to Save
    // User Name
    // User Email
    // User Phone
    // Other?
    var saveUserInput = function() {
        var name    = checkUserInput('FirstLastName'),
            phone   = checkUserInput('Mobile'),
            email   = checkUserInput('Email');
        _userInfo.name = (name.val() && !name.hasClass('parsley-error')) ? name.val() : undefined;
        _userInfo.phone = (phone.val() && !phone.hasClass('parsley-error')) ? phone.val() : undefined;
        _userInfo.email = (email.val() && !email.hasClass('parsley-error')) ? email.val() : undefined;
    };
    
    // After the Popup has been loaded make sure to populate back information if it exists.
    var rePopulateAfterLoad = function() {
        var fieldsFilledIn = false;
        if (_userInfo.name !== undefined) {
            fieldsFilledIn = true;
            $('input[name=CollectAtStoreForm_FirstLastName]').val(_userInfo.name);
        }
        if (_userInfo.email !== undefined) {
            fieldsFilledIn = true;
            $('input[name=CollectAtStoreForm_Email]').val(_userInfo.email);
        }
        if (_userInfo.phone !== undefined) {
            fieldsFilledIn = true;
            $('input[name=CollectAtStoreForm_Mobile]').val(_userInfo.phone);
        }
        
        if (_userInfo.phone === undefined && _userInfo.eamil === undefined && _userInfo.name === undefined){
            fieldsFilledIn = false;
        }
        
        if (fieldsFilledIn && $('#collect-at-store-form').parsley().validate()) {
            checkReservationField(true);
        }
        
    };
    
    var _handleUpdate = function(response, success) {
        var storeListHeight = $('#store-result-list').height();
        var $response = $(response);
        
        if (success) {
         // Slightly ugly way to keep the content from flickering due to differences in height.
            $response.find('#store-result-list').css('min-height', storeListHeight);
        }           
        
        $('#popup-main-content').html($response);           
        
        // Check if the collect@store form needs to be validated.
        $('form[name=CollectAtStoreForm]').length && S.Validation.init();
        
        checkIfPopup()
        
        // Remove any spinner.
        S.Common.removeSpinner($('#collect-at-store-popup-content'));
        
        // Check for updates to messaging and buttons on reload of popup
        _btnControlLogic();
        
        // When a page reload occurs.  Double check if the insurances have been added so we display them in the proper location
        // Only set the Added Insurance flag when an insurance has been selected and completed by a user.
        if ($('.select-insurance ul li.selected').length > 0) {
            _resetInsurance();
        }
    }
    
    /**
     * Perform an AJAX request.
     * @param {string} url The URL the request is done to.
     * @param {array} postData A serialized array of values.
     */
    var doAjaxRequest = function (url, postData, doScrollTop) {
    	var postData = postData || [];
    	var $storeSearchResult = $('#store-search-result-wrap').clone();
    	
    	// Bit of an ugly way of removing any error messages for the search field...
    	$storeSearchResult.find('.validation-error-field').empty();
    	$storeSearchResult.find('.validation-error-field').remove();
    	
    	_$storeList = { content: $storeSearchResult, scrollTop: $('#store-result-list').scrollTop() };
    	
    	// Save user inputs from being wiped on load of new C@S popup
    	if ($('input.placeholder-text').val() !== '' || $('.cas-input').val() !== undefined) {
    	    saveUserInput();
    	}

    	var request = $.ajax({
				url : url,
				data : postData,
				method: 'POST',
	    		dataType : 'html'	                		
    	});

    	// Things to always do and the .always (injecting the content) has to be executed before the .done
    	request.always( function(response) {
    	   
    	    _handleUpdate(response, true);
    	});
    	
    	// Things to do if the request succeeds.
    	request.done( function(response) {
    		/*	ECOM-10118 Adobe analytics tracking new collect@store checkout
    		 * 	Sending variables to Adobe with Ajax Call (by setting s.pageName,s.propXX and etc.)
    		 */
    	    try {
        		s.pageName=spageName;
        		s.server = sserver;
        		s.channel = schannel;	
        		s.pageType = spageType;
        		s.prop4 = sprop4;
        		s.prop9 = sprop9;
        		s.prop13 = sprop13;
        		s.prop11 = sprop11;
        		s.prop12 = sprop12;
        		s.state = sstate;
        		s.zip = szip;
        		s.events = sevents;
        		s.products = sproducts;
        		s.purchaseID = spurchaseID;
        		/*
        		 * ECOM-10802 We also need to set s.eVar30 since this is used when displaying order-id's by Shipping Methods in Adobe Analytics
        		 */
        		s.eVar30 = spurchaseID;
        		s.eVar2=seVar2;
            	s.eVar3=seVar3;
            	s.eVar5 = seVar5; 
            	s.eVar6 = seVar6; 
            	s.visitorID = svisitorID;
            	s.eVar7=seVar7;
            	s.eVar10=seVar10;
            	s.eVar13=seVar13;
            	s.eVar15=seVar15;
            	s.list1=slist1;
            	s.list2=slist2;    			
        		void(s.t());
    	    }
    	    catch(e) { out(e.message, 'error'); }
    	    
    	    rePopulateAfterLoad();
    	});
    	
    	// Things to do if the request fails. Currently nothing.
    	request.fail( function(response) {
    	    _handleUpdate(response);
    	});
    	
    };
   
    /**
     * Loads the initial Collect@Store popup with AJAX using the Popup.js module.
     */
	var openCollectAtStore = function () {
		
	    $('.product-detail-page, .article-page').on('click', '.collect-at-store.product', function(event) {     
	        var $this = $(this);
	        _addedInsurance = false;
	        
	        if(!$this.hasClass('disabled')){        	
            	event.preventDefault();
            	        	        	
            	// Set the _initialized flag to false when opening the popup. We do this so we always try to find the first store _with_ stock on popup load. 
            	_initialized = false;
            	
                var url = $this.data('url') + '?SKU=' + $this.data('sku');
            	var storeid = $this.data('storeid');
            	
            	// ECOM-11626 Only add SelectedStore if it's defined, eg when clicking on a store-link in c@s tab in product detail page 
            	if (typeof storeid !== 'undefined') {
            	    url = url + '&SelectedStore=' + storeid;
            	}
            	
            	if (S.MiniBasket.getNum() > 0) {
            	    _itemInBasket = true;
            	}
            	
            	// Init Parsley.js validation once the popup has been loaded.
                var initParsleyValidation = function() {
                    var $collectAtStoreName = $('#CollectAtStoreForm_FirstLastName');
                    
                    $('#collect-at-store-form').parsley();
                    
                    $collectAtStoreName.blur(function () {
                        $collectAtStoreName.parsley().validate();                 
                    });
                }
                
            	S.Popup.loadByAJAX(url, null, true, initParsleyValidation, 'html', $this.data('title'));
            	
            	// We don't want to close the collect@store popup when clicking the overlay.
            	$('.popup-overlay').off();
            	$('#popup-main-content').addClass('collect-at-store');
            	
            	if (_initialized) {
            	    initPopupEvents();
            	}
            	
            	setTimeout(function() { Site.Popup.checkHeight(); }, 750);
            	// Reset button loading state
            	Site.Common.resetButton(".collect-at-store-button");
	        }
        });
	};
	
	/**
	 * Enable closing the popup by clicking overlay again when we close the collect@store popup.
	 */	
	var closeCollectAtStore = function () {		
		
		$('.popup-close').on('click', function() {	
            if($(this).parents('.popup').find('#collect-at-store-popup-content').length > 0) {
				$('.popup-overlay').on('click', S.Popup.hide);
			}
            
			$('#popup-main .popup-main-content').removeClass('collect-at-store');
			// Clean up event listener when popup is closed
			_$popupMain.off('click', '#purchase-cas', false);
			// Clean up any remaining user data
			_userInfo = {};
			_accessoryArray = [];
			
			// Empty popup on close to prevent issues when adding insurances.
			$('#popup-main-content').empty();
		});
	};
	
	/**
	 * Performs an AJAX call that makes a Collect@Store reservation.
	 */
	var submitCollectAtStore = function () {        
	    	    
	    /*
	     * When clicking the "reserve" button.
	     */
		_$popupMain.on('click', '#do-collect-at-store-reservation', function(event) {
		    event.preventDefault();

		    // If the button is unavailable disable the form from being submitted by returning false and stopping the function
		    if ($(this).hasClass('not-available')) {
		        return false;
		    }
		    var $collectAtStoreForm = $('#collect-at-store-form');
		    var $searchLocation = $('#search-location');			
			
			// Set the search field to not required.
			$searchLocation.prop('required', false);
			
			// Submit form if valid.
			if($collectAtStoreForm.parsley().validate()) {
			    $collectAtStoreForm.submit();
			}
			else {
			    // Set the search field to required.
			    $searchLocation.prop('required', true);
			}   			
		});
        
		/*
		 * On form submit.
		 */
    	_$popupMain.on('submit', '#collect-at-store-form', function(event) {        		
    		event.preventDefault();

        	if (!$("input[name='search-location']").is(":focus")) {
        	    var $this = $(this);
            	
                // Disable the button to prevent multiple submits.
                $('#do-collect-at-store-reservation').prop('disabled', true).addClass('disabled');
        	    
        	    // Get the form action URL. Then grab the data from the input fields and serialize it.
                var url = $this.attr('action'),
                    postData = $this.serializeArray(),        	    
                    $selectedStore = $('#store-result-list input[name=LocalStore]:checked', $this),
                    selectedStoreId = $selectedStore.val();        		
        		
        		// ECOM-12755 - Remember the last store we performed a C@S order for. This is stored in a session cookie.
        		if(typeof selectedStoreId !== 'undefined' && selectedStoreId !== '') {
        		    var storeLat = $selectedStore.data('store-latitude'),
        		        storeLng = $selectedStore.data('store-longitude');
        		    
        		    S.Common.setCookie('prevUsedStoreId', JSON.stringify({id: selectedStoreId, latitude: storeLat, longitude: storeLng}), 0);
        		}
                
        		doAjaxRequest(url, postData, true); // ECOM-13353 We do a scrollTop here so we see the order-confirmation in all
        		setTimeout(function() { S.Popup.checkHeight(true); }, 750);
        	}
    	});    	
	};
	
	/**
	 * Update Store Max quantity Input field on main product
	 * When a store is preselected we request the stores quantity limit then update the ui as needed
	 */
	var updateMaxQuantityUI = function(data, product) {
	    product.attr('max', data.maxQuantity);
        product.attr('data-max-quantity', data.maxQuantity);
        
        // As of 07-10-2017 user can only enter popup with quantity 1
        // check only if quantity allowed is greater than 1
        if (data.maxQuantity > 1) {
            var placeHolder = product.parent().next('.placeholder-qty');
            placeHolder.addClass('add-product-quantity icon').text('+').removeClass('placeholder-qty');
        }
        
	};
	
	
	/**
	 * Request Store Max Quantity
	 * Only fired when a user opens the pop-up with a pre-selected store
	 * @author : Andrew Corliss
	 */
	var requestStoreMaxQuantity = function(productSKU, storeID) {
	    var $product = $('input[data-accessory-sku=' + productSKU + ']');
	    var productID = $product.attr('name').split('Quantity_')[1];

	    var request = $.ajax({
	        url : globals.baseUrl + storeMaxURL,
	        data: {
	            LineItemUUID : productID,
	            StoreUUID : storeID
	        },
	        method: 'GET',
	        dataType: 'json'
	    });
	    
	    request.done(function(data) {
	        updateMaxQuantityUI(data, $product);
	    });
	    
	};

	/**
	 * Adds an accessory.
	 */
	var addAccessory = function () {

		_$popupMain.on('click', '.collect-at-store.accessory', function() {
			var localstore =  $("input[name='LocalStore']:checked").attr("value") != undefined ?  $("input[name='LocalStore']:checked").attr("value") : "";
			var $this = $(this),
				url = $this.data('url'),				
				postData = {
			        'MainSKU': $this.data('main-sku'),
			        'SKU': $this.data('accessory-sku'),
			        'LocalStore': localstore
			    };
			doAjaxRequest(url, postData);
			
			// Have to push SKU to an array Since the DOM will 'reload' and button will lose href
			_hasAccessory = true;
            _accessoryArray.push($this.data('accessory-sku'));
            checkReservationField($('form[name=CollectAtStoreForm]').parsley().isValid());
		});
	};
	
	var removeAccessory = function(removalSKU) {
	  
	    _accessoryArray = _accessoryArray.filter(function(item) {
	       return item !== removalSKU;
	    });
	};
	
	/**
     * Add an Accessory to the Buy Button URL so it will be added to the cart
     * @return ammendString  {String}   -  Return string of accessories to be added to product ajax
     * @author Andrew Corliss
     * @date 30/11/2016
     */
    var addAccessoryToURL = function() {

        // Build the new URL string if any changes have been made in the popup
        var ammendString = '';
        // Build Array for products not available
        var productToCheck      = [];
        
        // Grabs error from DOM then removes product if store has no stock and is not s2s enabled
        var selectedStore = $('#store-result-list input[name=LocalStore]:checked');
        
        $('span.unavailable-product').each(function(key, value) {
            productToCheck.push($(this).data('remove-sku'));
        });
        
        // Build a clean array of products that can be added to the final URL
        var filteredArray = _accessoryArray.filter(function(el) {
            if (productToCheck.includes(el)===false) {
                return true;
            } else {
                return false;
            }
        });
        
        filteredArray.forEach(function(element) {
            // Add a ternary operator to handle when there is no input available
            var quantity = ($('input[data-accessory-sku='+element+']').val()) ? $('input[data-accessory-sku='+element+']').val() : 1;
            ammendString += '&SKU=' + element + '&Quantity_' + element + '=' + quantity;
        });
        
        return ammendString;
    };
    
    /**
     * Create the URL string necessary to send along insurance details to the basket
     */
    var createURLForInsurance = function(data, input) {
        var stringToAppend = "";
        
        var selectInsurKey  = "SelectIns_" + data.ProductLineItemUUID;
        var productRef      = "ProductToInsureRef=" + data.ProductToInsureRef + "&";
        var productLine     = "ProductLineItemUUID=" + data.ProductLineItemUUID + "&";
        var selectIns       = "SelectIns_" + data.ProductLineItemUUID  + "=" + data[selectInsurKey] + "&";
        var insuranceInfo   = "InsuranceInfoID=" + data.InsuranceInfoID + "&";
        var insuranceGroup  = "insurance-group=" + input.val();
        
        stringToAppend = "&BuyProduct=true&CollectAtStore=true" + productRef + productLine + selectIns + insuranceInfo + insuranceGroup;
        
        return stringToAppend;
        
    };
    
    /**
     * Add insurance details to Product
     * @author Andrew Corliss
     * @date 12/01/2017
     */
    var addInsurancesToCAS = function() {
        var urlString = "";
        var hasInsurance = $(".select-insurance li").hasClass("selected");
        
        if (hasInsurance) {
            var $inputs = $("input[name=insurance-group]");
            
            // Iterating over jQuery elements will need to use the $.each()
            $inputs.each(function(index, element) {
                // Use this so we are assured that we are only working on the current element
                var $this = $(this);
                var $parent = $this.closest(".select-insurance-form");
                var parentData = $parent.data("params");
                
                urlString += createURLForInsurance(parentData, $this);
            });

        }
        
        return urlString;
    };
    
	/**
	 * Add Products to basket (accessories and quantities)
	 * @author Andrew Corliss
	 * @date 30/11/2016
	 */
	var addProductsToBasket = function() {
	    
	    // Click event on Contianing div to ensure function will fire before addProductByAjax is fired
	    _$popupMain.on('click', '#purchase-cas', function(event) {
	        
	        // Do not do anything if the button is not-available
	        if ($('#purchase-cas .el-button.add-to-basket').hasClass('not-available')) {
	            return false;
	        }
	        // Send Technical Store ID
	        var $storeId = $('#collect-at-store-form').find('#store-result-list input[type=radio]:checked').data('storeid');
	        
	        // Cache Buy Button for reference through function
	        var $buyButton = $('#purchase-cas .el-button.add-to-basket');
	        // Build the new URL string if any changes have been made in the popup
	        var hrefString = $buyButton.data('href');
	        // Retrieve the main product selected by customer
	        var mainProduct = $('input[name=SKU]').val();
	        // Find the correlated quantity input and check.
	        // Add a ternary operator to handle when there is no input available
	        var mainQuantity = ($('input[data-accessory-sku='+mainProduct+']').val()) ? $('input[data-accessory-sku='+mainProduct+']').val() : 1;
	        
	        // Build new hrefString
	        hrefString +='&FromCollectAtStoreCart=true&Quantity_' + mainProduct + '=' + mainQuantity + '&StoreID=' + $storeId;
	        
	        if (_hasAccessory) {
	            hrefString += addAccessoryToURL();
            }
	        
	        //hrefString += addInsurancesToCAS();
	        
	        // Append new href string onto the Buy button before call sent to AddProductByAjax
	        $buyButton.data('href', hrefString);
	    });
	    
	};
	
	/**
	 * Extends ViewBasket.js in order to reuse existing functions for adding and subtracting quantity.
	 * TODO: Should we put this in its own file or not?...
	 */
	var CollectAtStoreBasket = S.View.Basket.extend({	    
        // Overrides the el defined in ViewBasket.js
	    el: '#popup-main',
	    
	    /*
         * Overrides the function with the same name in ViewBasket.js
         */
	    initialize: function() {
	        this.listenTo(Site.EventDispatcher, 'popup:hide', this.removeListeners);
	    },	    
	    
	    /*
	     * Overrides the function with the same name in ViewBasket.js
	     * Performs an update of the product quantity.
	     */
	    performUpdate: function($input) {
	        var $form = $input.closest('form'),
                url = $form.data('repostUrl');
                            
	        // Data to post.
	        var mainSKU = $form.find('input[name=SKU]').val(),
	            currentSKU = $input.data('accessorySku'),
	            storeUUID = $form.find('#store-result-list input[type=radio]:checked').val(),
	            quantity = $input.parent().siblings('input.new-quantity').val();
	            preventFire = false;
	            
	        // prevent main product from having a zero quantity as per Oyvind in ECOM-15901
	        // @author Andrew Corliss
	        if ($input.hasClass('prevent-zero-input')) {
	            if (quantity === 0 || quantity === '0') {
	                quantity = 1;
	                $input.val(1);
	                preventFire = true;
	            }
	        } else if (quantity === 0 || quantity === '0') {
	            removeAccessory(currentSKU);
	        }
	        
	        if (preventFire === false) {
    	        postData = {
                    'SKU': mainSKU,
                    'AccessorySKU': currentSKU,
                    'StoreID': storeUUID,
                    'UpdateQuantity': quantity
    	        }
    	        
    	        S.Common.createSpinner($('#collect-at-store-popup-content'));
    	        
    	        doAjaxRequest(url, postData);
	        }
	    },
	    
	    /*
	     * Undelegates events and removes listeners.
	     */
	    removeListeners: function() {
	        this.undelegateEvents();
	        this.stopListening();
	    },
	    
	    /*
	     * No-op. Overrides the same function in ViewBasket.js
	     */
	    removeItem: function() {}
	});

	
	/**
	 * Function for handling switching stores.
	 */	
	var changeStore = function () {
	    
		// Allow for the re-selection of a Store and collapse the store list.
		// The information does not constitute a 'change' event and needs to be completed on 'click'
		_$popupMain.on('click', '.js-select-store', function(event) {
		    
		    if ($('#store-search').hasClass('collapse')) {
                return false;
            }
		    var $this = $(this);
		    var $wrapper = $this.closest('label');
		    var $selectedId = $this.data('selector');
		    var storeUUID = $('[data-storeid='+ $selectedId +']').val();
		    
		   $('[data-storeid='+ $selectedId +']').attr('checked', true);
		  
	       $wrapper.addClass('selected');
	       $wrapper.next().addClass('selected collapse');
           $wrapper.prev().addClass('selected collapse');
           
           $wrapper.closest('#store-result-list').addClass('show-selected-store');  
           
           $('div.header').addClass('collapse');
           $('#store-search').addClass('collapse');
           $('div.btn-show-more').addClass('collapse');
           
           if (Site.Common.getCookieValue('sessionStatus') != 'null' || Site.Common.getCookieValue('sessionStatus') != '') {
               checkReservationField($('form[name=CollectAtStoreForm]').parsley().isValid());
           }
           
	       Site.Popup.checkHeight(true);
	       
           setSelectedStore();
		});
	};
	
	/**
	 * Performs an AJAX that sets the selected store.
	 */
	var setSelectedStore = function() {
	    var $form = $('#collect-at-store-form'),
            postData = $form.serializeArray(),
            url = $form.data('repostUrl'),
            searchTerm = $('#search-location').val();
        
        if(searchTerm !== '') {
            postData.push({ 'name' : 'searchTerm', 'value' : searchTerm });
        }
                
        doAjaxRequest(url, postData);
	};
	
	
	/**
	 * Order Summary and Reservation areas should match the height of one another.  To keep the buttons aligned for a user to make a decision without one being heavier
	 * @author Andrew Corliss
	 * @date 24/11/2016
	 */
	var alignButtonsOnChange = function() {
	    // Do not let element appear to 'jump'
	    // Set an opacity 0 and transition effect to let it fade in for a gentle effect.
	    if (!Site.RWD.isMqMatching(['S'])) {
    	    $('#purchase-cas').css({
                'opacity' : 0,
                'transition' : 'opacity 300ms ease-in'
            });
            
            // Set timeout is used here to ensure the proper size will be retireved from form area.
            setTimeout(function() {
                
                var targetHeight = $('.customer-info').height();
                
                $('.cas-order-summary').height(targetHeight);
    
                $('#purchase-cas').css({
                        'opacity' : 1,
                        'transition' : 'opacity 300ms ease-in'
                });
                
            }, 500);
	    }
	};
	
	/**
	 * Hide Buttons and simplify into one call to add class, cleans up _btnControlLogic
	 * @param buttonHide {String} Should specify which button to hide ('both', 'cas', 'buy')
	 * @param store      {Object} Store selected to perform check against
	 */
	var hideButtons = function(buttonHide, store) {
	    var $reserveBtn        = $('#online-reservation .el-button');
        var $buyNowBtn         = $('#purchase-cas .el-button');
  
	    if (buttonHide === 'both') {
	        $reserveBtn.addClass('not-available');
            $buyNowBtn.addClass('not-available');
            _showSpecialMessaging(store, 'unavailable');
            
	    } else if (buttonHide === 'cas') {
	        $reserveBtn.addClass('not-available');
	    } else {
	        
	        $buyNowBtn.addClass('not-available');
	        _showSpecialMessaging(store, 'unavailable');
	    }
	};
	
	/**
	 * Show hide the form fields on selected store change
	 * In some cases there will be an error on the product so store will not be selected.  Need to create check for this
	 */
	var initHideShowFields = function(store) {
	    // Need to check for a store object
	    if (store.store === undefined) {
            $('#order-seperator').removeClass('show-active');
            checkIfPopup()
        } else {
           $('#order-seperator').addClass('show-active');
           
           if (S.Common.getCookieValue('sessionStatus')) {
               checkReservationField(true);
           }
           checkIfPopup()
        }  
	};
	
	/**
	 * Disable the buy button if the option is not available
	 * Note : ship2StoreEnabled is returned as a string form DB
	 * @param storeSelect {Object} Store that has been selected by a user (optional)
     * @param qualifier   {BOOL}   Flag set to False if the search box enters an error state 
	 */
	var _btnControlLogic = function(storeSelect, qualifier) {
	    
	    // Set up cached variables to be used
	    var $reserveBtn        = $('#online-reservation .el-button');
	    var $buyNowBtn         = $('#purchase-cas .el-button');
	    var $quantityNotAvail  = $('.reserve-form-enable').data('insufficient-main');
	    var $store             = {};
	    var $selectedStore     = storeSelect || {store : undefined};
	    if (storeSelect === undefined && $('#store-result-list').hasClass('show-selected-store')) {
	        $store             = $('#store-result-list input[name=LocalStore]:checked');
	        $selectedStore     = storeSelect || {'store' : $store.data('store-name'),
	                'prepaid' : $store.data('prepaidcas'),
	                'shiptostore' : $store.data('shiptostore'),
	                'hideCollectAtStore' : $store.data('hidecas'),
	                'hasStock' : $store.data('instock')
	                };
	    }
	    
	    // Set BOOL flag of Ship2Store here because on load the popup will not be rendered 
	    var _shipToStoreEnable = $('#collect-at-store-popup-content').data('shiptostore');
        
	    // Qualifier should be triggered when a user search of stores has resulted in an error state
	    $reserveBtn.addClass('not-available');
	    
	    changeTitle($selectedStore);
        initHideShowFields($selectedStore);
        
	    if (qualifier === false) {
	        
	        hideButtons('both', $selectedStore);
	        alignButtonsOnChange();
            return false;
        }
	    
       alignButtonsOnChange();

	    
	    
        if (_shipToStoreEnable) {
            if ($selectedStore.hideCollectAtStore || $selectedStore.store === undefined || $('li.cart-product span').hasClass('unavailable-product')) {
                hideButtons('both', $selectedStore);
                return true;
            }
            if ((!$selectedStore.shiptostore && !$selectedStore.prepaid)
                    || $('#invalid-online-stock').hasClass('hide')) {
                hideButtons('buy', $selectedStore);
                return true;
            }
            if (!$selectedStore.hasStock || $quantityNotAvail) {
                $('input[name^=CollectAtStore]').attr('disabled', true);
                return true;
            }
        } else {
            hideButtons('buy', $selectedStore);
            return true;
        }
                
        if ($buyNowBtn.hasClass('not-available')) {
            $buyNowBtn.removeClass('not-available');
        }
        if ($selectedStore.hasStock || $selectedStore.instock) {
            $('input[name^=CollectAtStore]').attr('disabled', false);
        }
        _showSpecialMessaging($selectedStore);
        
	};
	
	var changeTitle = function(store) {
	    var $productType       = $(".cas-order-summary").data("product-type"),
            isBANProduct       = ($productType == "BANS" || $productType == "BANC" || $productType == "ZANC" || $productType == "ZBAN") ? true : false,
            $prepaidTitle      = $('.title-prepaid');
	    
	    
	    // From Oyvind : If an item is available for C@S and Selected store has Prepaid option true update title to reflect option to user
        // If item is a BANS, BANC, ZANC or ZBAN product after store selected display new header
        if (store.store !== undefined && isBANProduct) {
            $prepaidTitle.text(globals.collectAtStore.nonNormHeader);
            return false;
        }
        
        if ((store.shiptostore && store.prepaid) || store.store === undefined) {
            $prepaidTitle.text(globals.collectAtStore.shipPrepaidHeader)
        } else if (store.shiptostore === true) {
            $prepaidTitle.text(globals.collectAtStore.ship2storeHeader);
        } else {
            $prepaidTitle.text(globals.collectAtStore.prepaidHeader);
        }
	}
	
	/**
	 * Show messages correlating with current button state and options available for stores
	 * @param store   {Object}   Currently selected store
	 * @param message {BOOL}     Flag set if there are no options available to a user.
	 */
	var _showSpecialMessaging = function(store, message) {
	    // TODO : Rename variables for better understanding
	    var $warningMsg        = $('#info-collect-at-store'),
	        $unavailableMsg    = $('#collect-unavailable');
	    
	    // Detect flag for general unavailable message
	    if (message && message === 'unavailable') {
	        if (!$unavailableMsg.hasClass('active')) {
	            $unavailableMsg.toggleClass('active');
	        }
	    } else if (_itemInBasket) {
	        // Show warning text to user in case of an item in the basket
	        // Warning Text is - Item may not be available with other basket items
	        if (!$warningMsg.hasClass('active')) {
	            $warningMsg.toggleClass('active')
	        }
	    } else {
	        // Clean up messaging from the users view
            if ($unavailableMsg.hasClass('active')) {
                $unavailableMsg.toggleClass('active');
            } else if ($warningMsg.hasClass('active')) {
                $warningMsg.toggleClass('active');
            }
	    }
	};
	
	var checkReservationField = function(validForm) {
	    /**
         * Check validation of fields before allowing users to submit
         */
	    var errorShown = $('.reservation-error').is(':visible');
	    
        if (validForm && !errorShown) {
            $('#do-collect-at-store-reservation.el-button').removeClass('not-available');
        } else {
            $('#do-collect-at-store-reservation.el-button').addClass('not-available');
        }
	};
	
	/**
	 * Insurance Specific UX, when a user adds insurances to the basket, remove the slot from the right column and place in main location
	 *   - If a page reload occurs, do the same check and ensure it is shown in the correct space
	 */
	var _changeInsuranceSlot = function() {
	    var addInsurance = $('.accessories .insurance-wrap');
        var productInsurance   = $('.product-insurance-wrap');
        
        productInsurance.hide();
        productInsurance.removeClass('hide');
        
        addInsurance.hide();
       
        productInsurance.find('.accept-terms-check').prop('checked', true);
        
        if (globals.insurance.confirmationType === 'advanced') {
           $('#collect-at-store-form .shipping-product-section input[type="radio"]').prop('checked', true);
        }
        
        $('.product-insurance-wrap').show();
        
        // wait a moment to remove insurance to ensure the page is updated in the correct manner
        setTimeout(function() {
            addInsurance.remove();
            Site.Popup.checkHeight();
        }, 500);
        
        
	};
	
	var _resetInsurance = function() {
	    _changeInsuranceSlot();
	};
	
	var initPopupEvents = function() {
	    
	    var _$popBody = $('body');
        // TODO : Move these functions to better locations
	    _$popBody.on('click', '.show-address-info', function(event) {
            var currentEl = $(event.currentTarget);
            currentEl.toggleClass('is-active');
            currentEl.closest('.more-address-info').toggleClass('address-active');
        });
        
	    _$popBody.on('blur change keyup', '#collect-at-store-form input[name^="CollectAtStore"]', function(event) {
	        
	        if ($(event.currentTarget).hasClass('input-product-quantity') || $(event.currentTarget).attr('name') === 'search-location') {
	            return false;
	        }
	        
	        $(event.currentTarget).parsley().validate();
	        
	        var $name = $('input[name=CollectAtStoreForm_FirstLastName]'),
                $phone = $('input[name=CollectAtStoreForm_Mobile]'),
                $email = $('input[name=CollectAtStoreForm_Email]');
        
	       if ($name.parsley().isValid() && $phone.parsley().isValid() && $email.parsley().isValid() && $name.parsley() !== undefined ) {
               checkReservationField(true);
	       } else {
	           checkReservationField(false);
	       }
        });
	    
	    _$popBody.on('click', '#show-more-stores', function(event) {
	        renderMoreStores();
	    });
	    
	    // Microsoft Edge Browser bug.  If redraws occur it may not register the click event.  
	    // Need to listen on mouseup to ensure the event will fire.
        _$popBody.on('click mouseup', '.accessories input[name=accept-insurance-terms]', function(event) {
            _changeInsuranceSlot();
        });
        
        _$popBody.on('click mouseup', '.accessories .accept-terms-link', function(event) {
            event.preventDefault();
            if (globals.insurance.confirmationType === 'advanced') {
                _changeInsuranceSlot();
            }
        })
        
        _$popBody.on('click', '.cart-product .insurance-terms-close', function(event) {
            if (globals.insurance.confirmationType === 'advanced' && $('.select-insurance ul input[type=radio]:checked').length > 0) {
                $('.select-insurance ul input[type=radio]:checked').prop('checked', false);
            }
        });
        
        _$popBody.on('click', '.news-text', function(event) {
            var $this = $(this);
            
            $this.toggleClass('open');
            Site.Popup.checkHeight();
        });

       window.addEventListener('orientationchange', function() {            
            if (S.RWD.getCurrentMq() == 'S') {
                $('.cas-order-summary').height('auto');
            }
        });
       
	};
	
    /**
     * Initialize
     */
    var init = function () {
    	out('Loading Collect@Store ...');
    	
    	_$popupMain = $('#popup-main');
    	
    	new CollectAtStoreBasket();
    	
        openCollectAtStore();
        closeCollectAtStore();
    	submitCollectAtStore();    	
    	changeStore();
    	addAccessory();
    	addProductsToBasket(); // Listener to update addToCart URL of buy button
        eventsStoreList(); // Set up events for the store search/selection.
    	_isLoaded = true;
    	initPopupEvents();    	
        out('Collect@Store loaded...');      
    };
    
    
    /**
     * Returns an array of markers closest to the provided google.maps.LatLng position.
     * @param {google.maps.LatLng} latLng Position from which to get the nearest markers.
     * @param {int} howMany Maximum number of markers to return.
     * @returns {array} Array containing google.maps.Marker objects.
     */
    var getNearestMarkers = function (latLng, howMany) {
    	out("getNearestMarkers() from " + latLng);
    	
    	// Create a copy of the array so we can manipulate it
    	var markers = _s.storeMarkers.slice();
    	
        var markerDist,
            markerLatLng,
            l = markers.length;
        
        for (var i = 0; i < l; i++) {
            markerLatLng = new _gm.LatLng(markers[i].latitude, markers[i].longitude);
            markerDist = _gm.geometry.spherical.computeDistanceBetween(latLng, markerLatLng);
            markers[i].distance = (markerDist/1000).toFixed(2);
        }
        
        markers.sort(function (a, b) {
            return b.distance - a.distance;
        });
        
        out("getNearestMarkers() end");
        // Only return the actual markers.
        return {
            latitude : latLng.lat(),
            longitude: latLng.lng(),
            resultMarkers : markers
        };        
    };
    

    /**
     * Initialize the feature to determine the closest store with stock for the product
     * @param {object} opts Refer to the _DEFAULTS constant at the beginning of this file.
     * @param {function} googleMapsCallback is a callback function that will be called after determining the store.
     * @returns {Boolean}
     */
    var initGoogleMaps = function (opts, callback) {
    	
    	out("initGoogleMaps()");
    	
    	_initGoogleMaps = callback;
    	
        // Assemble settings.
        if (opts) {
            for (o in opts) {
                if (_s.hasOwnProperty(o)) {
                    _s[o] = opts[o];
                }
            }
        }
        
        // Load the google maps API. The API will call the callback Site.CollectAtStore.onApiScriptLoaded when loaded.
        // If the google.maps object doesn't exist yet, let's load the API async and then try again.
        if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
            out('google.maps not available, fetching async..');
            
            var script = document.createElement("script");
            
        	var mapsHost = _s.secureHost 
        		? "https://maps-api-ssl.google.com" 
				: "http://maps.googleapis.com";
            
            script.src = mapsHost + "/maps/api/js?" + _s.authToken + "&libraries=geometry&sensor=true&language=" + _s.languageCode.toLowerCase() + "&callback=Site.CollectAtStore.onApiScriptLoaded";
            
            document.body.appendChild(script);

        } else {
            out('Map loaded..');
            
            // If the API is loaded.
            this.onApiScriptLoaded();
        }
        
        out("initGoogleMaps() end");
    };
    

    var isLoaded = function () {
        return _isLoaded;
    };
    
    /**
     * Perform a Maps search
     * @param {string} str Search string for a geographical place.
     * @param {int} [numClosestStores=null] If set, will return an array or closest stores.
     * @returns {boolean} Returns false if no valid location was found. Otherwise true or store array.
     */
    var doSearchAction = function (str, numClosestStores, onResultReady) {
        var resultLocation,
            searchTerm = str + ', ' + _s.country;
        
        if (!str) {
            out('doSearchAction: Invalid search string provided.');
            _btnControlLogic({}, false);
            return false;
        }
        _geocoder = _geocoder || new google.maps.Geocoder();
        
        var geocoderRequest = { componentRestrictions: { 'country': _s.countryCode }, address : searchTerm, language : _s.languageCode };
        
        out("geocoderRequest: address " + geocoderRequest.address + ", language " + geocoderRequest.language + ", region " + geocoderRequest.region);        
        
        _geocoder.geocode(geocoderRequest, function (results, status) {
            var res, cTypes;
            
            if (status === _gm.GeocoderStatus.OK) { // We got a result back.
                res = results[0];
                
                // Make sure that the result is within our country.
                for (var i = 0; i < res.address_components.length; i++) {
                    cTypes = res.address_components[i].types || false;
                    if (cTypes.length) { 
                        // Iterate component types to find out if it's a country.
                        for (var j = 0; j < cTypes.length; j++) {
                            // Here's the country code, does it match our country?
                            if (cTypes[j] === 'country' && res.address_components[i].short_name !== _s.countryCode) {
                            	onResultReady && onResultReady(false);
                                return false;
                            }
                        }
                    }
                }

                resultLocation = res.geometry.location;
                // Don't fetch closest store, just focus in on the first geo result.
                if (!numClosestStores) {
                	onResultReady && onResultReady(res);
                } else { // Get closest stores and return them.
                	onResultReady && onResultReady(getNearestMarkers(resultLocation, numClosestStores));
                }
            } else {
                out('Geocode was not successful for the following reason: ' + status, 'warn');
                onResultReady && onResultReady(false);
            }
        });
        
        return true;
    };   

    /**
     * Binds events related to the store list interaction.
     */
    var eventsStoreList = function() {
        var $searchField = $('#search-location'),
            $storeSelectError = $('#store-select-error');
            self = this;
        /* 
         * Setup click event for "change-store" button. 
         * The click event for changing store is rebound each time the template is reloaded through AJAX, so we first have to remove it.
         * When the user clicks the "change" button, the closest store disappears and the search field appears 
         */
        _$popupMain.on('click', '.change-store', function (event) {
            event.preventDefault();
            
            if ($('div.header').hasClass('collapse')) {
                $('div.header').removeClass('collapse');
                
                if (_showMoreStores.length > 3) {
                    $('div.btn-show-more').removeClass('collapse');
                }
            }
            var $wrapper = $(this).closest('label');
            
            $wrapper.removeClass('selected');
            $wrapper.next().removeClass('selected collapse');
            $wrapper.prev().removeClass('selected collapse');
            initHideShowFields({store:undefined});
            
            $wrapper.parent('#store-result-list').removeClass('show-selected-store');
            Site.Popup.checkHeight();
            
            showSearchField();
        });                                     
        
        // Setup click event for the search button. freeTextSearch function will be called when clicked.
        _$popupMain.on('click', '#free-text-search', _.throttle(function () {
            var $searchLocation = $('#search-location');            
            $('.btn-show-more').addClass('collapse');
            freeTextSearch($searchLocation);
            
            return false;
        }, 500, {trailing: false})); 
        
        // Setup click event for the search input field. freeTextSearch function will be called if we press the enter key in the store search input field.
        _$popupMain.on('keypress', '#search-location', function (event) {            

            if(event.which === 13) {
                event.preventDefault();
                $('.btn-show-more').addClass('collapse');

                freeTextSearch($(this));    
                $(event.currentTarget).blur();
                
                return false;
            }
        });
    }    
    
    /**
     * Show store search input field.
     */
    var showSearchField = function() {
        $('#store-search').removeClass('collapse');
        
        $('#search-location').focus();
    }
    
    /**
     * Given store id, iterates through a list of stores.
     * If the store id is found in the list, it returns the store object. If not, it returns false.
     * @param {string} storeId The id of a store.
     * @param {array} stores An array containing store objects.
     */
    var getStoreById = function(storeId, stores) {
        
        for(var i=0; i<stores.length; i++) {                                           
            if(stores[i].id === storeId) {
                return stores[i];
            }
        }
        
        return false;
    }
    
    /**
     * Sorts stores by ascending distance. 
     * @param {array} stores An array containing store objects.
     * @param {float} latitude The latitude to base the distance calculation from.
     * @param {float} longitude The longitude to base the distance calculation from.
     * @returns {array} stores The sorted array.
     */
    var sortStores = function(stores, latitude, longitude) {
        
        if(stores && latitude && longitude) {

            stores.sort(function(a, b) {

                var aDist = S.Geolocation.haversine(latitude, longitude, a.latitude, a.longitude),
                    bDist = S.Geolocation.haversine(latitude, longitude, b.latitude, b.longitude);

                a.distance = (aDist >= 10 ? parseInt(aDist, 10) : aDist.toString().substr(0,3));
                b.distance = (bDist >= 10 ? parseInt(bDist, 10) : bDist.toString().substr(0,3));

                return bDist - aDist;
            });
        }
        return stores;
    }
    
    
    /**
     * Filters a list of stores based on a distance less than 15km.
     * @param {array} stores An array of store objects.
     * @returns {array} filteredStores The filtered array, can be empty.
     */
    var filterStoresByDistance = function(stores) {
        var filteredStores = [];
        
        if(stores) {
            filteredStores = stores.filter(function(store) {
                return (store.distance <= 15);
            });
        }
        
        return filteredStores;
    }
    
    /**
     * Filters a list of stores by the stock status of the main product.
     * @param {array} stores An array of store objects.
     * @returns {array} filteredStores The filtered array, can be empty.
     */
    var filterStoresByStock = function(stores) {
        var filteredStores = [];
        
        if(stores) {
            filteredStores = stores.filter(function(store) {
                return store.storeStock;
            });
        }
        
        return filteredStores;
    }
    
    /**
     * Displays either the closest store, or a list of stores sorted by distance in ascending order.
     * 
     * @param {object} obj An object containing: 
     *        {array} resultMarkers A list of store objects.
     *        {float} latitude The latitude to base distance calculation from.
     *        {float} longitude The longitude to base distance calculation from.
     */
    var displayClosestStore = function(obj, shouldDisplay) {
        var filteredStores = [],
            sortedStores = [];
            _displayStore = (shouldDisplay) ? true : false;
        // Sort the stores according to distance to the supplied coordinates.
        try {
            _showMoreStores = sortStores(obj.resultMarkers, obj.latitude, obj.longitude).reverse().slice(0);
            
            if (_displayStore) {
                filteredStores.push(shouldDisplay);
            }

            sortedStores = _showMoreStores.splice(0, 3);
            
            if(!_initialized) {     
                _initialized = true;            
               // filteredStores = filterStoresByStock(filteredStores);
            }
            // There is at least one store within 15km - show the first.
            if(filteredStores.length && shouldDisplay) {
                renderStoreList(sortedStores, filteredStores[0]);
            }
            // Show a list of all stores sorted by ascending distance.
            else {
                renderStoreList(sortedStores, false);
            }
            
            if (_showMoreStores.length === 0) {
                $('div.btn-show-more').addClass('collapse');
            }
            
        } catch(e) {
            
            $('div.header').addClass('collapse');
            $('div.btn-show-more').addClass('collapse');
            $('div.store-search-wrap').removeClass('border-none');
            $('#store-search').removeClass('collapse');
            
            if (Site.RWD.isMqMatching(['S', 'M'])) {
                $('.search-location-wrap').addClass('margin-0');
                $('#store-search').addClass('margin-0');
            }
            
            $('#search-location').parsley().addError('badZip', {
                message : globals.collectAtStore.addressNotAvailable,
                updateClass: true
            });
           
            // out('No stores match the zip code ' + obj.resultMarkers);
           
        }
    }    
        
    /**
     * Creates a list with all stores the product is available in.
     * @param {array} stores An array containing store objects.
     * @param {object} closestStore A store object.
     */
    var renderStoreList = function(stores, closestStore) {
        var $resultList = $('#store-result-list'),
            $errorLabel = $('#search-location-error'),
            resultItems = [],
            storeSelected = {};
        // Search did not return any results - display an error.
        if (!stores) {            
            
            // Uncheck any selected store.
            $resultList.find('input[type=radio]:checked').prop('checked', false);
            
            // Hide header.
            $('div.header', _$popupMain).addClass('collapse');
            $('div.btn-show-more', _$popupMain).addClass('collapse');
            // Define an error for the search input field.
            globals.validationErrors = { 
                    formErrors: { id: "collect-at-store-form" },
                    fieldErrors: [{
                        id: "search-location",
                        description: globals.collectAtStore.addressNotAvailable
                    }]
            }
        } 
        else {
            // Show header.
            $('div.header', _$popupMain).removeClass('collapse');
            $('div.btn-show-more', _$popupMain).removeClass('collapse');
            $('#store-search').addClass('border-none');
            // Define an empty error for the search field.
            globals.validationErrors = { 
                    formErrors: { id: "collect-at-store-form" },
                    fieldErrors: [{
                        id: "search-location",
                        description: ""
                    }]
            }
            
            var $source = $('#handlebars-store-result-list').html(),
                template = Handlebars.compile($source),                
                $resultItems = $(template({ 'store' : stores })),
                $closestStore = {};
                $resultList.append($resultItems);
            // We have found a store within 15km
            if(closestStore) {
                
                $closestStore = $resultItems.find('#' + S.Common.safeString(closestStore.id)).closest('label');                
                
                storeSelected = {
                               'store' : closestStore.name,
                               'prepaid' : closestStore.prepaidCas,
                               'shiptostore' : closestStore.ship2Store,
                               'hideCollectAtStore' : closestStore.hideCAS,
                               'hasStock' : closestStore.storeStock,
                               'storeID'  :  closestStore.id
                 };
                
            } else if (stores.length === 1) {
             // Set the selected store by making a server call.
                // From Allan, we do not want to set Selected Store on Search
                // Only Set store on button select click, or clicking on link in PDP
                storeSelected = {
                        'store' :  stores[0].name,
                        'prepaid' :  stores[0].prepaidCas,
                        'shiptostore' :  stores[0].ship2Store,
                        'hideCollectAtStore' :  stores[0].hideCAS,
                        'hasStock' :  stores[0].storeStock,
                        'storeID'  : stores[0].id
                 };
                $closestStore = $resultItems.find('#' + S.Common.safeString(storeSelected.storeID)).closest('label');
                closestStore = true;
                                
            } else {
                // No store within 15km, just select the first store.
                $closestStore = $resultItems.first('label');
                showSearchField();
            }
            
            // Set the closest store as the selected one.
            $closestStore.find('span input[type=radio]').prop("checked", true);
            
            if (!$.isEmptyObject(storeSelected) && closestStore) {

                $closestStore.addClass('selected');
                $resultList.addClass('show-selected-store');                
                
                $('#store-search').addClass('collapse');
                $('div.header', _$popupMain).addClass('collapse');
                $('div.btn-show-more', _$popupMain).addClass('collapse');
                
                if ($priceQuantityWrap.data('quantity-counter') == true) {
                    requestStoreMaxQuantity($('form').find('input[name=SKU]').val(), storeSelected.storeID);
                }

                _btnControlLogic(storeSelected);
            }
            
            // Render the list.
            $resultList.empty().append($resultItems).addClass('active'); 
            checkIfPopup()           
        }
        checkIfPopup()
        S.Validation.init();
    }

    
    /** 
     * If we are adding an accessory or change store after a search, we can just get the matching store from CC_StoresCacheInfo.
     * The only thing missing is the distance, which we send as a parameter in the AJAX call in CollectAtStore.js.       
     *
     * The order of what to base the search on is:
     * 1. selectedStoreId - C@S-popup has either been opened from the "store status" tab, or we have selected a store by click it in the popup (causing a reload of the content).
     * 2. userPostalCode - Logged in user. Find the store(s) closest to the users postal code.
     * 3. prevUsedStoreId - This is set as a browser session cookie when the user has performed a C@S order.
     * 4. myStoreId - Any store that has been set in the store finder.
     * 5. geolocation - If geolocation is permitted or not. The users location will be used to find the closest store(s).
     * 6. Show search input field.
     * 
     * @param {string} selectedStoreId The id of a store.
     * @param {object} mapOptions Options for the map, also contains the list of stores.
     * @param {string} userPostalCode The postal code of a logged in user.
     */
    var determineStore = function(selectedStoreId, userPostalCode, mapOptions) {
        var storeMarkers = mapOptions.storeMarkers,
            searchTerm = $('#search-location').val(),
            prevUsedStore = JSON.parse(S.Common.getCookieValue('prevUsedStoreId')), // ECOM-12755 - Get the last store we performed a C@S order to. This is stored in a session cookie.
            myStore = S.Geolocation.getMyStore() ? S.Geolocation.getMyStore() : null, // Get myStore if it's set.
            geolocationPermitted = S.Geolocation.isGeolocationPermitted() ? S.Geolocation.isGeolocationPermitted() : null;

        // Initialise Parsley.js validation.    
        $('#collect-at-store-form').parsley();
        Site.CollectAtStore.setStoreList(storeMarkers);    
        // Init Google Maps.
        if(typeof google === 'undefined' || typeof _gm === 'undefined') {                  
            initGoogleMaps(mapOptions);
        }
        
        // If we have saved the store list - which is done every time we select a store - just replace the current content with it.
        if(Object.keys(_$storeList).length) {
            $('#store-search-result-wrap', _$popupMain).replaceWith(_$storeList.content);
            $('#store-result-list', _$popupMain).scrollTop(_$storeList.scrollTop);
            _$storeList = {};
            _btnControlLogic();
        } else {
            // Get closest store in list of available stores
            if(selectedStoreId) {
                var store = getStoreById(selectedStoreId, storeMarkers);
                if(store) {
                    displayClosestStore({resultMarkers: storeMarkers, latitude: store.latitude, longitude: store.longitude}, store);
                }
            }            
            else if(userPostalCode) {
                /*
                 * Callback function - find store(s) closest to the approximate location of the users postal code.
                 */
                var findClosestStore = function() { 
                    doSearchAction(userPostalCode, 10, displayClosestStore);
                }
                
                // Google Maps not yet available - register a callback that is executed when it is.
                if(typeof google === 'undefined' || typeof _gm === 'undefined') {
                    _googleMapsCallback = findClosestStore;
                }
                else {
                    // Google Maps is available, perform the search directly.
                    doSearchAction(userPostalCode, 10, displayClosestStore);
                }
            }
            else if(prevUsedStore || myStore) {
                // Use any store previously used in the session before My Store.
                var availableStore = prevUsedStore ? prevUsedStore : myStore;
                
                var store = getStoreById(availableStore.id, storeMarkers);
                
                if(store) {
                    availableStore = store;
                }
                
                displayClosestStore({resultMarkers: storeMarkers, latitude: availableStore.latitude, longitude: availableStore.longitude}, store);
            }        
            else if(geolocationPermitted) {
                
                /*
                 * Callback function - find stores(s) closest to the users approximate location.
                 */
                var findClosestStore = function() {
                    var result = getNearestMarkers(_currentGooglePosition, 10);
                    displayClosestStore(result);         
                }
                
                // Google Maps not yet available - register a callback that is executed when it is.
                if(typeof google === 'undefined' || typeof _gm === 'undefined') { 
                    _googleMapsCallback = findClosestStore;
                }
                else {                
                    // Google Maps is available - execute the callback immediately.
                    findClosestStore();
                }
            }
            else {
                showSearchField();
                $('div.header', _$popupMain).addClass('collapse');
                $('div.btn-show-more', _$popupMain).addClass('collapse');
                _btnControlLogic();
            }
        }
    };
    
    var renderMoreStores = function() {
        
        var remainingStores = _showMoreStores.splice(0, 3),
            $resultList = $('#store-result-list'),
            $source = $('#handlebars-store-result-list').html(),
            template = Handlebars.compile($source),                
            $resultItems = $(template({ 'store' : remainingStores }));
       
        $resultList.append($resultItems);
        
        checkIfPopup()
        
        if (_showMoreStores.length === 0) {
            $('div.btn-show-more').addClass('all-stores-shown');
            _showMoreStores = [];
        }
    };
    
    /**
     * Update Search if String and We have a Store by same name
     * - The presumption is made that a user will be searching for particular store and not area 
     * - Store.name.weight > Area.name.weight
     * 
     * @param {string} - String from User Search
     * @return {string} - Return unchanged string if not matching to any store or is zip code, return string as store name if we find a specific store
     */
    var _findStorePresent = function(str) {
        
        if (isNaN(parseInt(str, 10))) {
            
            var storeList = Site.CollectAtStore.getStoreList();
            var searchString = '';

            var searchForStore = $.grep(storeList, function(element) {
                var storeName = element.name.toUpperCase();
                var searchString = str.toUpperCase();
                return storeName.indexOf(searchString) >= 0; 
            });
            
            if (searchForStore.length === 1) {
                return searchForStore[0].name;
            } else {
                return str;
            }
        }
        return str;
    };
    
    /**
     * Freetext search.
     */
    var freeTextSearch = function ($input) {
        var searchTerm = $input.val(),
            $storeResultList = $('#store-result-list'),
            searchByStore; 
        
        // Empty out any validation errors and re-submit
        if (Site.RWD.isMqMatching(['S', 'M'])) {
            $('.search-location-wrap').removeClass('margin-0');
            $('#store-search').removeClass('margin-0');
        }
                
        $('#search-location-error').empty();
        $('.validation-error-field').empty();
        try {
            $('#search-location').parsley().removeError('badZip', {updateClass: true});
        } catch (e) {
            
        }
        // Scroll the store list to the top. 
        $storeResultList.scrollTop(0);        
        // Is the search input field valid - i.e: not empty.
        if($input.parsley().isValid()) {
            $storeResultList.removeClass('active');
            searchTerm = _findStorePresent(searchTerm);
            // Perform a freetext search.
            doFreeTextSearch(searchTerm, 5, displayClosestStore);
        }
        else {
            globals.validationErrors = { 
                    formErrors: { id: "collect-at-store-form" },
                    fieldErrors: [{
                        id: "search-location",
                        description: globals.parsley.required
                    }]
            };
            _btnControlLogic({}, false);
                        
            S.Validation.init();
        }
    };
    
    
    /**
     * Performs a Maps search for the provided search string. Does not return
     * anything, but invokes a callback function.
     * @param {string} searchTerm An address or similar, to search for.
     * @param {int} numClosestStores How many of the closest stores should we get? Can be 0.
     * @param {function} onResult Callback function to invoke when a result has been delivered.
     *          The callback function will receive a results array.
     */
    var doFreeTextSearch = function (searchTerm, numClosestStores, onResult) {
        doSearchAction(searchTerm, numClosestStores, onResult);
    };
    
    var _getStoreList = function() {
        return _DEFAULTS.storeMarkers;
    }
    
    var _setStoreList = function(stores) {
        _DEFAULTS.storeMarkers = stores;
        return true;
    }
    
    return {
        init : init,        
        isLoaded : isLoaded,
        rePopulateAfterLoad : rePopulateAfterLoad,
        setStoreList : _setStoreList,
        getStoreList : _getStoreList,
        /**
         * Callback method used by Google Maps API script when the script is loaded.
         * Ensures that Google Maps API is available and the geolocation position is defined, then runs a callback if defined.
         */
        onApiScriptLoaded : function () {
            out('onApiScriptLoaded!');
            
            var geolocationPermitted = S.Geolocation.isGeolocationPermitted();
            var geolocationPosition = S.Geolocation.getPosition();
            _isLoaded = true;
            
            if (google && google.maps) {
                out('onApiScriptLoaded: google.maps ready');
                _gm = google.maps; // Just a shortcut alias.
            }   
            
            // Google maps is loaded, geolocation is permitted and we have a location.
            if(typeof _gm !== 'undefined' && geolocationPermitted && typeof geolocationPosition !== 'undefined') {
                
                // Encode the gelocation position using the Google maps latitude and longitude
                _currentGooglePosition = new google.maps.LatLng(geolocationPosition.latitude, geolocationPosition.longitude);
                    
                out('onApiScriptLoaded: position=' + _currentGooglePosition);
                
                // Run any registered callback.
                if(typeof _googleMapsCallback === 'function') {
                    out('onApiScriptLoaded: running _googleMapsCallback');
                    _googleMapsCallback();
                }
            } 
            // Google maps is loaded and geolocation isn't permitted.
            else if(typeof _gm !== 'undefined' && !geolocationPermitted) {
                
                // Run any registered callback.
                if(typeof _googleMapsCallback === 'function') {
                    out('onApiScriptLoaded: running _googleMapsCallback');
                    _googleMapsCallback();
                }          
            }
            else { // Try again..
                out('onApiScriptLoaded did not receive google.maps or Site.Geolocation.getPosition() is undefined. Try again later...', 'warn');
                _isLoaded = false;
                setTimeout(this.onApiScriptLoaded, 2000);
            }
        },
        
        determineStore      : determineStore,
        renderStoreList     : renderStoreList,
        renderMoreStores    : renderMoreStores,
        initGoogleMaps      : initGoogleMaps,
        doFreeTextSearch    : doFreeTextSearch
    };
    
}(this, Site, Site.Common.out, jQuery));