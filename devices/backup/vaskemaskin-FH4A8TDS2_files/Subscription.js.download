/***
 * Module Subscription
 * Interactions for products having subscription (mobile phones).
 */

Site.Subscription = (function(window, S, $, out) {

    var _$subscriptionOverlayContainer = $('#subscription-overlay-container'), 
        _sliderContractLengthsMap = [ 1, 6, 12, 24 ],
        _sliderDataUsageMap = [0, 0.2, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 20, 30, 50, 100],
        _slidersInitialized = false,
        _$htmlBody = $('html, body'),
        _$siteWrapper = $('#site-wrapper, body'),
        _requestObject = {},
        _selectedSKU = '',
        _isDanish    = false,
        _showICC     = false;
    
    /**
     * Slides the window to the top.
     */
    var slideToTop = function () {
        _$htmlBody.animate({'scrollTop' : S.RWD.isMqMatching('S') ? $('.master-head > .top').height() : 0 }, 300);
    };    
    
    /**
     * Triggers the buy button visibility for products with subscriptions.
     */
    var triggerPricebuttonBox = function() {
        var $trigger = $('#buy-without-subscription-trigger');

        $trigger.on('click', function(event) {
            event.preventDefault();
            $('.price-buttons').toggle();
            $trigger.children('.fa').toggleClass('fa-angle-up fa-angle-down');
        });
    };

    /**
     * Triggers the subscription info popup.
     */
    var triggerSubscriptionInfoPopup = function() {         
        var $trigger = $('.trigger-subscription-info-popup'),
            $closeTrigger = $('#close-subscription-info-popup'), 
            $subscriptionInfoPopup = $('#subscription-info-popup');            

        $trigger.on('click', function(event) {
            event.preventDefault();
            $subscriptionInfoPopup.fadeIn('fast');
            $trigger.last().hide();
        });

        $closeTrigger.on('click', function() {
            $subscriptionInfoPopup.fadeOut('fast');
        });
    };

    /**
     * Triggers the subscription overlay
     * The subscription overlay is opened when: 
     *     - in the product detail page when we click on the see all subscriptions button
     *     - in the product detail page when we click on the add to basket button from the product detail page subscription's informations dedicated area
     */
    var triggerSubscriptionOverlay = function() {
        
         // Fire the two events described in the method's description
        $('#see-all-subscriptions, #add-to-cart-subscription').on('click', function() {
            var $this = $(this),
                href = $this.data('href');            
            
            S.Common.resetButton($this);
            
            _slidersInitialized = false;
            
            $('#subscription-overlay-top').removeClass('disp-none');
            openSubscriptionOverlay(_$subscriptionOverlayContainer);
            
            // Open the subscription overlay and show directly the numbers step of the subscription's checkout
            if(typeof $this.data('subscription-result-id') !== 'undefined') {
                
                // We firstly open the subscription overlay for having all the structure and the html elements created and then we replace the content with the checkout overlay
                var request = S.Common.makeAjaxCall($('#see-all-subscriptions').data('href'), '', getOverlayContent, _$subscriptionOverlayContainer);
                
                request.done(function() {                
                   var $orderSubscription = $('#order-subscription'),
                       $everythingElse = $('#subscription-list, #subscription-top-selections, #check-subscription, #subscription-filters');
                   
                   href = href + '?SubscriptionResultId=' + $this.data('subscription-result-id') + '&SubscriptionOperator=' + $this.data('subscription-operator-name');
                   S.Common.makeAjaxCall(href, '', subscriptionNumberTriggers, $orderSubscription);
                
                   $orderSubscription.removeClass('disp-none');                   
                   $everythingElse.hide().addClass('disp-none');
                });
                
            }
            else {
                $('#subscription-list').empty();
                
                // Display subscription's list of the default profile
                S.Common.makeAjaxCall(href, '', getOverlayContent, _$subscriptionOverlayContainer);                
            }
            slideToTop();
        });

        // Enable the onClick event on the profile buttons to update the subscription overlay with the chosen subscription profile
        _$subscriptionOverlayContainer.on('click', '.usage-profile:not(.selected)', function() {            
            var $this = $(this);

            // Update sliders with the new default values from the chosen profile.
            _slidersInitialized = false;
            
            _requestObject = JSON.parse($this.attr('data-subscription-request'));
            
            if(_selectedSKU.length) {
                _requestObject.Profile.UnitIdentifier = _selectedSKU;
            }
            
            // Update the subscription's list
            getSubscriptions(_requestObject);
            
            // Update the class of the other profiles
            $this.siblings('.selected').removeClass('selected');
            $this.addClass('selected');

        });

        // Close the overlay
        _$subscriptionOverlayContainer.on('click', '#close-subscription-overlay', function() {
            // Reset the height of the site wrapper when the subscription overlay is closed.
            _$siteWrapper.css('height', 'auto');             
                        
            $('#trigger-numbers, #subscription-list').empty();
            //$('#subscription-top-selections').show().removeClass('disp-none');
            $('#check-subscription, #order-subscription, #subscription-filters').hide().addClass('disp-none');
            
            // ECOM-12158 - clear the location hash when we close the overlay.
            window.location.hash = '';
            
            // "Slide out" the overlay from top to bottom.
            closeSubscriptionOverlay(_$subscriptionOverlayContainer);
            
        });
    };

    /**
     * Subscription's details
     */
    var subscriptionOverlayTriggers = function() {
        
        var $subscriptionOverlayList = $('#subscription-list'),
            $subscriptionFilters = $('#subscription-filters'),
            $subscriptionSelections = $('#subscription-top-selections');
        
        $subscriptionOverlayList.on('click', '.trigger-bottom', function() { 
            var $this = $(this);
            $this.toggleClass('fa-angle-down fa-angle-up');
            $this.parent().toggleClass('expanded');
            $this.siblings('.bottom').slideToggle(800, function() { adjustOverlayHeight(); });      
        });

        $subscriptionOverlayList.on('click', '.info .trigger', function() { 
            var $this = $(this);
            $this.parent().next().toggleClass('disp-block');
            $this.toggleClass('fa-angle-down fa-angle-up');
            adjustOverlayHeight();
        });

        $subscriptionOverlayList.on('click', '.spec .trigger', function() { 
            var $this = $(this);
            $this.parent().next().toggleClass('disp-block');
            $this.toggleClass('fa-angle-down fa-angle-up');
            adjustOverlayHeight();
        });
        
        $subscriptionOverlayList.on('click', '.trigger-pricing-overlay', function() {
            $(this).closest('.subscription').children('.pricing-overlay').fadeIn('fast');
        });

        $subscriptionOverlayList.on('click', '.pricing-overlay .trigger.close', function() {
            $(this).parent().fadeOut('fast');
        });
        
        $subscriptionOverlayList.on('click', '.pricing-overlay .change-usage', function() {
            $(this).closest('.pricing-overlay').hide();
            
            subscriptionSliders();
            
            $subscriptionSelections.slideUp(400, function() {
                $subscriptionFilters.slideDown(600, function() { adjustOverlayHeight(); }); 
            });
            
            slideToTop();
        });

    };

    /**
     * Advanced choices
     */
    var subscriptionFilterTriggers = function() {
        var $subscriptionFilters = $('#subscription-filters'),
            $subscriptionSelections = $('#subscription-top-selections'),
            $extraChoicesTrigger = $('#trigger-extra-choices');

        $('#trigger-filters').off().on('click', function() {            
            subscriptionSliders();
            $subscriptionSelections.slideUp(400, function() {
                $subscriptionFilters.slideDown(600, function() { adjustOverlayHeight(); }).removeClass('disp-none');
            });                 
        });

        $('#close-subscription-filters').off().on('click', function() {
            $subscriptionFilters.slideUp(600, function() {                
                $subscriptionSelections.slideDown(600, function() { adjustOverlayHeight(); });
            }).addClass('disp-none');
        });
        
        $extraChoicesTrigger.off().on('click', function() {
            $extraChoicesTrigger.siblings().toggle();
            adjustOverlayHeight();
            $(this).children('.fa').toggleClass('fa-angle-down fa-angle-up');
        });

        $('#trigger-operators').off().on('click', function() {
            if(S.RWD.isMqMatching(['M','S'])) {
                $('#operators-list').toggle();
                adjustOverlayHeight();
                $(this).children('.fa').toggleClass('fa-angle-down fa-angle-up');
            }
        });

        $('#see-results').on('click', function() {
            _$htmlBody.animate({'scrollTop' : $('#subscription-list').offset().top }, 300);
        });
    };

    /**
     * Trigger the add to cart button in the subscription's list for showing the checkout overlay
     */
    var subscriptionCheckoutTriggers = function() {
        var $subscriptionOverlayList = $('#subscription-list'),
            $orderSubscription = $('#order-subscription'),        
            $everythingElse = $('#subscription-list, #subscription-top-selections, #check-subscription, #subscription-filters');
       
        /* Plugs the event handler to start the subscription buying process when the user selects a 
         * subscription and clicks on the basket button in the subscription list 
         * 
         * Ajax call to start the subscription buying process CC_ViewSubscription-StartBuyingProcess
         * Appending to the querystring the subscription id from the data attribute is needed because Intershop
         * does not allow to use {{X}} in the isprint tag
         * */
        $subscriptionOverlayList.on('click', '.trigger-add-to-cart', function() {
            var $this = $(this),
                href = $this.data('href') + '?SubscriptionResultId=' + $this.data('subscription-result-id') + '&SubscriptionOperator=' + $this.data('subscription-operator-name');
            
            $subscriptionOverlayList.removeClass('fade-in');
            $orderSubscription.removeClass('disp-none');            
            $everythingElse.hide();
            
            S.Common.makeAjaxCall(href, '', subscriptionNumberTriggers, $orderSubscription);
            
            slideToTop();
        });
    };
    
    /**
     * Trigger new number events in the checkout overlay
     */
    var subscriptionNumberTriggers = function() {        
        var $numbersOverlay = $('#numbers-overlay'),
            $orderSubscription = $('#order-subscription'),
            $triggerNumbers = $('#trigger-numbers');
       
        // Trigger the back button 
        backButtonTrigger();
        
        $orderSubscription.removeClass('disp-none');
        $triggerNumbers.show(0, function() { $(this).addClass('fade-in'); });        
        
        if(_$subscriptionOverlayContainer.data('jqAnimate')) {
            $triggerNumbers.removeClass('no-opacity'); 
        }
        
        // Callback function used when the ajax request is done
        var doneCallback = function(callbackParameters){
           
           // Enable the event handlers
           existingNumberTriggers();
           servicesTriggers();
           
           // Update the class of the other number buttons
           callbackParameters.thisObject.siblings('.number-type').addClass('semi-opaque');
           callbackParameters.thisObject.siblings('.selected').removeClass('selected');
           callbackParameters.thisObject.addClass('selected').removeClass('semi-opaque');
           
           // Adjust the height when everything is loaded.
           adjustOverlayHeight();
        };

        // Plugs the event handler when the user clicks on the number buttons
        $orderSubscription.off().on('click', '.number-type:not(.selected), .validate-again', function() {
            var $this = $(this);
            
            $this.siblings('.numbers-overlay').empty();
            
            if($this.hasClass('inactive')) {
                numberType = $this.data('number-type');
                
                $this.siblings('.number-type:not(.inactive)').removeClass('selected semi-opaque');
                $this.siblings('.not-supported').addClass('disp-none');
                $this.siblings('#' + numberType + '-not-supported').removeClass('disp-none').addClass('disp-block');
            }
            else {
                href = $this.data('href');
            
                callbackParameters = { thisObject: $this }; 
                logMsg = 'for ' + $this;
                S.Common.makeAjaxCall(href, '', doneCallback, $numbersOverlay, logMsg, callbackParameters);
                $numbersOverlay.show();
                
                // Update the class of the other number buttons
                $this.siblings('.not-supported').addClass('disp-none');
                $this.siblings('.number-type:not(.inactive)').addClass('semi-opaque');
                $this.siblings('.selected').removeClass('selected');
                $this.addClass('selected').removeClass('semi-opaque');
            }
        });
    };
    
    var servicesTriggers = function() {
        var $services = $('#services');
        
        $('#numbers-overlay').off('click', '.service').on('click', '.service', function() {
            
            var serviceid = $(this).data('serviceid'),
                href = $services.data('href') + "&ServiceId=" + serviceid;         
            
            logMsg = 'with service id: ' + serviceid;
            S.Common.makeAjaxCall(href, '', null, $services, logMsg);          
            
        });
    };
    
    var triggerShowHide = function(iccAvail, numberValid, iccValid, operatorValid) {
        var subscribeTrigger = $('#trigger-validate-number');
 
        if (iccAvail) {
            if (iccValid && operatorValid && numberValid) {
                subscribeTrigger.show();
            } else {
                subscribeTrigger.hide();
            }
        } else if (numberValid && (iccAvail === false)) {
            subscribeTrigger.show();
        } else {
            subscribeTrigger.hide();
        }
    }
    
    /**
     *  Trigger existing number event in the checkout overlay
     */
    var existingNumberTriggers = function() {

        var $numberContentOverlay = $('#numbers-overlay'),
            $validateNumberArrowIcon = $('#validate-number-arrow-icon'),
            $validateICCArrowIcon    = $('#validate-icc-arrow-icon'),
            $validateOperatorArrowIcon    = $('#validate-operator-arrow-icon'),
            $number = $('#number'),
            $icc    = $('#icc-sim'),
            $currOperator = $('#current-operator'),
            iccAval = false;
            operatorAval = false;
            numberAval = false;
            hasICC = ($icc.length > 0) ? true : false;
        // Enable parsley validation
        //Make sure trigger is hidden on load
        
        triggerShowHide(false, false);
        
        if($number.length > 0) {
            $number.parsley('validate');

            $number.parsley().off().on('field:success', function() {
                if (this.$element.attr('name') === 'number' && $validateNumberArrowIcon.hasClass('fa-caret-right')) {
                    $validateNumberArrowIcon.toggleClass('fa-caret-right fa-check'); 
					
                }
                numberAval = true;
                triggerShowHide(hasICC, numberAval, iccAval, operatorAval);
            });
            
            $number.parsley().off().on('field:error', function() {
                if (this.$element.attr('name') === 'number' && $validateNumberArrowIcon.hasClass('fa-check')) {
                    $validateNumberArrowIcon.toggleClass('fa-check fa-caret-right');
                }
                numberAval = false;
                triggerShowHide(hasICC, numberAval, iccAval, operatorAval);
            });
            
            if ($number.parsley().isValid()) {
                $validateNumberArrowIcon.toggleClass('fa-check fa-caret-right');
                numberAval = true;
                triggerShowHide(hasICC, numberAval, iccAval, operatorAval);
            }
         }
        
        if ($icc.length > 0) {
            $icc.parsley('validate');
            
            $icc.parsley().off().on('field:success', function() {
                
                if (this.$element.attr('name') === 'icc-sim' && $validateICCArrowIcon.hasClass('fa-caret-right')) {
                    $validateICCArrowIcon.toggleClass('fa-check fa-caret-right');
                    
                    iccAval = true;
                    triggerShowHide(hasICC, numberAval, iccAval, operatorAval); 
                }
            });
            
            $icc.parsley().off().on('field:error', function() {
                if (this.$element.attr('name') === 'icc-sim' && $validateICCArrowIcon.hasClass('fa-check')) {
                    $validateICCArrowIcon.toggleClass('fa-check fa-caret-right');
                    
                    iccAval = false;
                    triggerShowHide(hasICC, numberAval, iccAval, operatorAval); 
                }
            });
            
            $currOperator.on('keyup', function(event) {
                var target = $(event.currentTarget);
                
                if (target.val() !== '') {
                    if (!$validateOperatorArrowIcon.hasClass('fa-check')) {
                        $validateOperatorArrowIcon.toggleClass('fa-check fa-caret-right');
                    }
                    
                    operatorAval = true;
                    triggerShowHide(hasICC, numberAval, iccAval, operatorAval); 
                }
                else{
                    if ($validateOperatorArrowIcon.hasClass('fa-check')) {
                        $validateOperatorArrowIcon.toggleClass('fa-check fa-caret-right');
                    }
                    operatorAval = false;
                    triggerShowHide(hasICC, numberAval, iccAval, operatorAval); 
                }
            });
        }
        
        // Plugs the event handler when the user clicks on "Send Validating SMS"
        $numberContentOverlay.off('click', '#trigger-validate-number').on('click', '#trigger-validate-number', function() {
            
            var number = $number.val(),
                href = $(this).data('href') + "&Number=" + number,
                postData = {};
            
            if ($('input[name=icc-sim]').is(':visible')) {
                postData = { ICC : $('input[name=icc-sim]').val(), Operator : $('input[name=operator]').val() };
            }
            
           logMsg = 'with number: ' + number;
           
           request = S.Common.makeAjaxCall(href, postData, servicesTriggers, $numberContentOverlay, logMsg);
           request.done(function() {
               smsValidationTrigger();
           });
        });
    };

    
    /**
     *  Trigger SMS validation event in the existing number overlay
     */
    var smsValidationTrigger = function() {
       var $validatingSMSResponse = $('#validating-sms-response'),
           $validateNumberArrowIcon = $('#validate-number-arrow-icon'),
           $smsCode = $('#sms-code');
        
        /* 
         * Enable Parsley.js validation. 
         * SMS Parsley.js validation is fired after the second digit through 
         * the data attribute data-parsley-validation-threshold of the input field
         */       
        if($smsCode.length > 0 && $smsCode.val() === '') {
			$smsCode.focus();
            $smsCode.parsley('validate');
            
            // SMS-code validation success.
            $smsCode.parsley().off().on('field:success', function() {
                if(this.$element.attr('name') === 'sms-code') {
                    var smsCode = $smsCode.val(),
                        href = this.$element.data('href') + '&Code=' + smsCode;
                    
                    logMsg = 'with SMS code: ' + smsCode;
                    
                    request = S.Common.makeAjaxCall(href, '', null, $validatingSMSResponse, logMsg);
                    
                    request.done(function() {
                        var $addToBasketSms = $('#add-to-basket-sms');
                        
                        if($addToBasketSms.length > 0) {
                            if($validateNumberArrowIcon.hasClass('fa-ban')) {
                                $validateNumberArrowIcon.toggleClass('fa-ban fa-check');     
                            } else if($validateNumberArrowIcon.hasClass('fa-caret-right')) {
                                $validateNumberArrowIcon.toggleClass('fa-caret-right fa-check');
                            }

                            showCartButtons(true);
                            $addToBasketSms.children().focus();
                        }
                        
                        if($('#sms-validation-error').length > 0) {
                            if($validateNumberArrowIcon.hasClass('fa-check')) {
                                $validateNumberArrowIcon.toggleClass('fa-check fa-ban');     
                            } else if($validateNumberArrowIcon.hasClass('fa-caret-right')) {
                                $validateNumberArrowIcon.toggleClass('fa-caret-right fa-ban');
                            }
                            $('#trigger-validate-number').focus();
                        }
                    });
                }
            });
          
            // SMS-code validation failure.            
            $smsCode.parsley().off().on('field:error', function() {
                
                if (this.$element.attr('name') === 'sms-code') {
                    
                    if($validateNumberArrowIcon.hasClass('fa-check')) {
                        $validateNumberArrowIcon.toggleClass('fa-check fa-caret-right');
                    } else if($validateNumberArrowIcon.hasClass('fa-ban')) {
                        $validateNumberArrowIcon.toggleClass('fa-ban fa-caret-right');
                    }
                    
                    if($('.choose-number .add-subscription-to-basket').length > 0){
                        showCartButtons(false);
                    }
                }
            });
        }
        else {
            var href = $('.choose-number .number-type.selected').data('href');
            $('.trigger-numbers .validate-again').data('href', href);
        }        
    };
    
    // Show or hide add-to-cart button in the services section
    var showCartButtons = function(show) {
        $buttonsAddToCart = $('.choose-number .add-subscription-to-basket');
        
        if(show) {
            $buttonsAddToCart.show();
        }
        else {
            $buttonsAddToCart.hide();
        }
    };
    
    /**
     *  Trigger the go back button in CC_SubscriptionType
     */
    var backButtonTrigger = function() {
       var $orderSubscription = $('#order-subscription'),
           $triggerNumbers = $('#trigger-numbers'),
           $subscriptionListAndSelections = $('#subscription-list, #subscription-top-selections');
        
       $('#subscription-overlay').off().on('click', '.trigger-back-button', function() {                        
            out('backButtonTrigger, going back to the main overlay with _requestObject: ');
            out(_requestObject);
                      
            getSubscriptions(_requestObject);
            
            $orderSubscription.addClass('disp-none');
            $triggerNumbers.removeClass('fade-in').hide().empty();
            
            if(_$subscriptionOverlayContainer.data('jqAnimate')) {
                $triggerNumbers.addClass('no-opacity'); 
            }
            
            $subscriptionListAndSelections.show();
            
            $('.number-type').removeClass('selected semi-opaque');
        });        
    };
    
    /**
     * Setup triggers for the "check subscription" component
     */
    var checkSubscriptionTriggers = function() {
        var $checkSubscription = $('#check-subscription'),
            $subscriptionSelections = $('#subscription-top-selections'),
            $checkSubscriptionForm = $("#check-subscription-form"),
            $responseArea = $('.check', $checkSubscription),
            $loader = $('.ajax-loader', $checkSubscription),
            $succesMsg = $('.check.success', $checkSubscription),
            $errorMsg = $('.check.error', $checkSubscription);

        $('.subscription-overlay #trigger-check-subscription').off().on('click', function() {
            $subscriptionSelections.slideUp(400, function() { 
                $checkSubscription.slideDown(600, function() { adjustOverlayHeight(); }); 
            });
        });
        
        /**
         * Reset the check-subscription to it's default state
         */
        var resetSubscriptionChecker = function() {
            $checkSubscription.removeClass("hide-form");
            $checkSubscriptionForm.trigger("reset").parsley().reset();
            $responseArea.addClass('disp-none');
        };

        $('.subscription-overlay #close-check-subscription').off().on('click', function() {
            $checkSubscription.slideUp(600, function() {
                $subscriptionSelections.slideDown(600, function() { adjustOverlayHeight(); resetSubscriptionChecker(); }); 
            });
        });
        
        $('.multiple-rows #close-check-subscription, #check-subscription .try-again').off().on('click', function() {
            if ( $responseArea.is(":visible")) {
                resetSubscriptionChecker();
            }
        });
        
        /**
         * Validate and send request for check subscription component
         * */
        $('#check-subscription .button').off().on('click', function(event) {
            event.preventDefault();

            if (!$checkSubscriptionForm.parsley().isValid()) {
                $checkSubscriptionForm.parsley().validate();
            }

            else {
                $checkSubscription.addClass("hide-form");
                checkUpgradeSubscription($checkSubscriptionForm.serialize());
            }
        });
        
        /**
         * Make AJAX to check if subscription can be upgraded
         */
        var checkUpgradeSubscription = function(checkUpgradeSubscriptionRequest) {
            S.Common.showAjaxLoader($loader);
            
            // Send the JSON request         
            out('checkUpgradeSubscription, sent request: '); 
            out(checkUpgradeSubscriptionRequest);
            
            var request = $.ajax({
                method: 'POST',
                url: $checkSubscriptionForm.attr('action'),
                dataType: 'json',
                data: checkUpgradeSubscriptionRequest
            })
            
            // Things to always do.
            .always(function() {
                S.Common.hideAjaxLoader($loader);
            })
            
            // Things to do when the request is done.
            .done(function(checkUpgradeSubscriptionRequest) {
                out('checkUpgradeSubscription, request done. Received response: ');
                out(checkUpgradeSubscriptionRequest);
                handleSubCheckResponse(checkUpgradeSubscriptionRequest);
            })
            
            // Things to do if the request fails.
            .fail(function(checkUpgradeSubscriptionRequest ) { 
                out('checkUpgradeSubscription, request failed. Received response: ', 'error');
                out(checkUpgradeSubscriptionRequest, 'error');
                handleSubCheckResponse("error");
            });
        };
        
        /**
         * Show either a success or an error message depending on the response from check subscription component.
         */
        var handleSubCheckResponse = function(response) {
            if (typeof response.status !== 'undefined' && response.status === "Success") {
                $succesMsg.removeClass('disp-none');
            }
            else {
                $('.error-message', $errorMsg).html(response.message);
                $errorMsg.removeClass('disp-none');
            }
        };
    };

    /**
     * Initialize the sliders & the operators list.
     * They are initialized through the _slidersInitialized every time a profile is changed
     */
    var subscriptionSliders = function() {
        
        // Mapping of the tags used in the CC_SubscriptionOverlay
        var slidersTag = {
            upfrontCost: 'pay-now',
            contractLength: 'duration',
            dataUsage: 'data',
            shortMessagesPerDay: 'texts',
            averageLengthOfCall: 'call-length',
            callsPerDay: 'calls-per-day'
        };

        // Sliders
        var $upfrontCost = $('#slider-' + slidersTag.upfrontCost), 
            $contractLength = $('#slider-' + slidersTag.contractLength), 
            $dataUsage = $('#slider-' + slidersTag.dataUsage), 
            $shortMessagesPerDay = $('#slider-' + slidersTag.shortMessagesPerDay), 
            $averageLengthOfCall = $('#slider-' + slidersTag.averageLengthOfCall), 
            $callsPerDay = $('#slider-' + slidersTag.callsPerDay), 
            $networkIds = $('.subscription-filters .operator input[type=checkbox]');

        // Slider values
        var $upfrontCostValue = $('#slider-' + slidersTag.upfrontCost + '-value'),
            $contractLengthValue = $('#slider-' + slidersTag.contractLength + '-value'),
            $dataUsageValue = $('#slider-' + slidersTag.dataUsage + '-value'),
            $shortMessagesPerDayValue = $('#slider-' + slidersTag.shortMessagesPerDay + '-value'),
            $averageLengthOfCallValue = $('#slider-' + slidersTag.averageLengthOfCall + '-value'),
            $callsPerDayValue = $('#slider-' + slidersTag.callsPerDay + '-value');
        
        // Initialize the sliders & operator's list
        if (_slidersInitialized === false) {
            out('Initialize sliders and operators list');
            
            _slidersInitialized = true;
            
            /*
             * Operators
             */
            
            // No NetworkIds specified - select all.
            if(_requestObject.Profile.NetworkIds.length === 0) {
                $networkIds.each(function() {
                    var $this = $(this);
                
                    if (!$this.is(':checked')) { $this.prop('checked', true);  }
                    _requestObject.Profile.NetworkIds.push($this.data('operator-id'));
                });
            }
            // Else, only select the specified NetworkIds.
            else {
                $networkIds.each(function() {
                    var $this = $(this);
                
                    if(_requestObject.Profile.NetworkIds.length && _requestObject.Profile.NetworkIds.indexOf($this.data('operator-id')) !== -1) { 
                        $this.prop('checked', true);  
                    }
                    else {
                        $this.prop('checked', false);
                    }
                    
                });
            }
            
            // Turn off the onclick listeners on the operator's list and trigger the event.
            $networkIds.off().on('click', function() {
                var $this = $(this),
                    operatorId = $this.data('operator-id'),                
                    index = _requestObject.Profile.NetworkIds.indexOf(operatorId);
                
                /* 
                 * Update the NetworkIds array. 
                 * If the checkbox is checked and ID not is in the array, add it. Else, remove it.
                 */  
                if ($this.is(':checked') && index === -1) {
                    _requestObject.Profile.NetworkIds.push(operatorId);
                    
                } else if (index > -1) { 
                    _requestObject.Profile.NetworkIds.splice(index, 1);
                }
                
                // Get subscriptions for the updated profile
                getSubscriptions(_requestObject);
            });

            /*
             * Sliders
             */
            
            // Pay now
            $upfrontCost.slider({
                range: 'min',
                min: 1,
                step: 100,
                max: 10000,
                slide: function(event, ui) {
                    updateSlider($upfrontCostValue, ui.value === 1 ? ui.value : ui.value-1);
                },
                change: function(event, ui) {
                    updateSlider($upfrontCostValue, ui.value === 1 ? ui.value : ui.value-1);
                }
            });
            
            // First time slider value and slider text is updated with the default value
            $upfrontCost.slider("value", _requestObject.Profile.UpfrontCost); 
            
            // Subscription period
            $contractLength.slider({
                range: 'min',
                min: 0,
                max: _sliderContractLengthsMap.length-1,
                slide: function(event, ui) {
                    updateSlider($contractLengthValue, _sliderContractLengthsMap[ui.value]);
                },
                change: function(event, ui) {
                    updateSlider($contractLengthValue, _sliderContractLengthsMap[ui.value]);
                }
            });
                        
            // First time slider value and slider text is updated with the default value
            var normalizedContractLength = normalizeContractLength(_requestObject.Profile.ContractLength);
            var indexSliderContractLengthsMap = _sliderContractLengthsMap.indexOf(normalizedContractLength);
            
            $contractLength.slider("value", indexSliderContractLengthsMap);
            
            // GB data per month            
            $dataUsage.slider({
                range: 'min',
                min: 0,
                max: _sliderDataUsageMap.length-1,
                slide: function(event, ui) {
                    updateSlider($dataUsageValue, _sliderDataUsageMap[ui.value]);
                },
                change: function(event, ui) {
                    updateSlider($dataUsageValue, _sliderDataUsageMap[ui.value]);
                }
            });

            var normalizedDataUsage = normalizeDataUsage(_requestObject.Profile.DataUsage);
            var indexSliderDataUsageMap = _sliderDataUsageMap.indexOf(normalizedDataUsage);
        
            // First time slider value and slider text is updated with the default value
            $dataUsage.slider("value", indexSliderDataUsageMap);
            
            // Texts per day
            $shortMessagesPerDay.slider({
                range: 'min',
                min: 0,
                step: 1,
                max: 100,
                slide: function(event, ui) {
                    updateSlider($shortMessagesPerDayValue, ui.value);
                },
                change: function(event, ui) {
                    updateSlider($shortMessagesPerDayValue, ui.value);
                }
            });
            
            // First time slider value and slider text is updated with the default value
            $shortMessagesPerDay.slider("value", _requestObject.Profile.ShortMessagesPerDay);
            
            // Average call duration
            $averageLengthOfCall.slider({
                range: 'min',
                min: 1,
                step: 1,
                max: 20,
                slide: function(event, ui) {
                    updateSlider($averageLengthOfCallValue, ui.value);
                },
                change: function(event, ui) {
                    updateSlider($averageLengthOfCallValue, ui.value);
                }
            });    
            
            // First time slider value and slider text is updated with the default value
            $averageLengthOfCall.slider("value", _requestObject.Profile.AverageLengthOfCall);

            // Calls per day
            $callsPerDay.slider({
                range: 'min',
                min: 0,
                step: 1,
                max: 50,
                slide: function(event, ui) {
                    updateSlider($callsPerDayValue, ui.value);
                },
                change: function(event, ui) {
                    updateSlider($callsPerDayValue, ui.value);
                }
            });
            
            // First time slider value and slider text is updated with the default value
            $callsPerDay.slider("value", _requestObject.Profile.CallsPerDay);

            // Up front Cost - Profile:UpfrontCost
            $upfrontCost.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.UpfrontCost;
                $upfrontCostValue.html(ui.value === 1 ? ui.value : ui.value-1);
                checkForChangesAndUpdateRequestObject('UpfrontCost', oldValue, ui.value === 1 ? ui.value : ui.value-1);
            });
            
            // Contract length - Profile:ContractLength
            $contractLength.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.ContractLength;
                $contractLengthValue.html(_sliderContractLengthsMap[ui.value]);
                checkForChangesAndUpdateRequestObject('ContractLength', oldValue, _sliderContractLengthsMap[ui.value]);
            });        
    
            // Data usage - Profile:DataUsage
            $dataUsage.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.DataUsage;
                $dataUsageValue.html(_sliderDataUsageMap[ui.value]);
                checkForChangesAndUpdateRequestObject('DataUsage', oldValue, _sliderDataUsageMap[ui.value]);
            });
    
            // SMS per day - Profile:ShortMessagesPerDay
            $shortMessagesPerDay.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.ShortMessagesPerDay;
                $shortMessagesPerDayValue.html(ui.value);
                checkForChangesAndUpdateRequestObject('ShortMessagesPerDay', oldValue, ui.value);
            });
    
            // Call length - Profile:AverageLengthOfCall
            $averageLengthOfCall.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.AverageLengthOfCall;
                $averageLengthOfCallValue.html(ui.value);
                checkForChangesAndUpdateRequestObject('AverageLengthOfCall', oldValue, ui.value);
            });
    
            // Calls per day - Profile:CallsPerDay
            $callsPerDay.bind('slidechange', function(event, ui) {
                var oldValue = _requestObject.Profile.CallsPerDay;
                $callsPerDayValue.html(ui.value);
                checkForChangesAndUpdateRequestObject('CallsPerDay', oldValue, ui.value);
            });
        }
    };

    /**
     * Update the slider text value while sliding
     */
    var updateSlider = function(id, value) {
        id.html(value);
    };
    
    /**
     * Change the contract length value based on the following hard coded logic
     */
    var normalizeContractLength = function(value) {
        if (value >= 24) {
            return 24;
        } else if (value >= 12) {
            return 12;
        } else if (value >= 6) {
            return 6;
        } else {
            return 1;
        }
    };
    
    /**
     * Change the dataUsage value based on the following hard coded logic
     */  
    var normalizeDataUsage = function(value) {
        if (value > 50) {
            return 100;
        } else if (value > 30) {
            return 50;
        } else if (value > 20) {
            return 30;
        } else if (value > 12) {
            return 20;
        } else if (value > 10) {
            return 12;
        } else if (value > 8) {
            return 10;
        } else if (value > 7) {
            return 8;
        } else if (value > 6) {
            return 7;
        } else if (value > 5) {
            return 6;
        } else if (value > 4) {
            return 5;
        } else if (value > 3) {
            return 4;
        } else if (value > 2) {
            return 3;
        } else if (value > 1) {
            return 2;
        } else if (value <= 1) {
            if (value > 0.5) {
                return 1;
            } else if (value > 0.2) {
                return 0.5;
            } else if (value > 0) {
                return 0.2;
            } else {
                return 0;
            }
        } else {
            return value;
        }
    };
    
    /**
     * Get subscriptions general information
     */
    var getOverlayContent = function(url) {
        $('#subscription-list').empty().removeClass('fade-in');
        
        // Update the _requestObject with the default profile
        _requestObject = JSON.parse($('.amount-of-use .usage-profile.selected').attr('data-subscription-request'));
                
        out('getOverlayContent. Default request object: ');
        out(_requestObject);        
        
        // Get subscriptions for the default profile
        getSubscriptions(_requestObject);
        
        initEventHandlers();
    };
    
    /**
     * Initialises the event handlers for the subscription overlay.
     */
    var initEventHandlers = function() {
        subscriptionFilterTriggers(); // Advanced choices
        subscriptionOverlayTriggers(); // Subscription details
        checkSubscriptionTriggers(); // Check your subscription overlay
        subscriptionCheckoutTriggers(); // Checkout overlay
    };

    /**
     * Get and update the subscription's list
     */
    var getSubscriptions = function(subscriptionsRequest) {
        var $loader = $('#subscription-overlay-top > .ajax-loader');
        
        S.Common.showAjaxLoader($loader);
        
        // Send the JSON request         
        out('getSubscriptions, request sent:');
        out(subscriptionsRequest);
        
        var request = $.ajax({
            method: 'POST',
            url: S.Subscription.restUrl,
            dataType: 'json',
            contentType: 'application/json',
            crossDomain: true,
            data: JSON.stringify(subscriptionsRequest),
            
        });
        
        // Things to do when the request is done.
        request.done(function(subscriptionsResponse) {                        
            out('getSubscriptions, request done. Received response: ');
            out(subscriptionsResponse);            
            
            updateSubscriptionRowTemplate(subscriptionsResponse);            
        });
        
        // Things to do if the request fails.
        request.fail(function(subscriptionsResponse) {
            out('getSubscriptions, request failed. Received response: ', 'error');
            out(subscriptionsResponse, 'error');                        
            
            updateSubscriptionRowTemplate(subscriptionsResponse);            
        });
        
        // Things to always do.
        request.always(function() {
            S.Common.hideAjaxLoader($loader);
        });
    };

    /**
     * Open the subscription overlay.
     * @param {jQuery} $container The subscription overlay container element.
     */
    var openSubscriptionOverlay = function ($container) {
        
        $container.addClass('slide-up').data('isShown', !$container.data('isShown'));
        
        toggleByJquery($container);
    };
    
    /**
     * Close the subscription overlay.
     * @param {jQuery} $container The subscription overlay container element.
     */
    var closeSubscriptionOverlay = function ($container) {
        
        $container.removeClass('slide-up').data('isShown', !$container.data('isShown'));
        
        toggleByJquery($container);
    };

    /**
     *  Toggle the subscription overlay by using jQuery animation instead of CSS3 classes.
     */
    var toggleByJquery = function ($container) {
        
        if ($container.data('jqAnimate')) {
            
            $container.show().css('z-index', $container.data('isShown') ? 30 : -30);
            
            $container.animate({ 'top' : $container.data('isShown') ? 15 : 2000 }, 
                    { 
                        duration: 600, 
                        complete: function() {
                            if($container.data('isShown')) {
                                adjustOverlayHeight();                                
                            }
                            else {
                                $(this).hide();
                            }
                        }
                    }
            );
        }
    };
    
    /**
     *  Sets the height of the site wrapper when we load subscriptions.
     */
    var adjustOverlayHeight = function () {
        var $headerHeight = $('.master-head').height(),
            $subscriptionTopHeight = $('#subscription-overlay-top').height(),
            $subscriptionListHeight = $('#subscription-list').height(),
            $windowHeight = $(window).height(),
            totalHeight = parseInt($subscriptionListHeight + $subscriptionTopHeight + 130, 10);
                    
        if($windowHeight > totalHeight) {
            _$siteWrapper.css('height', parseInt($windowHeight + $headerHeight, 10));
        }
        else {            
            _$siteWrapper.css('height', totalHeight + $headerHeight);
        }        
    };
    
    /**
     * Update the subscription's list through handlebar template
     */
    var updateSubscriptionRowTemplate = function(subscriptionsResponse) {
        var $subscriptionList = $('#subscription-list'),
            source = $('#subscriptionsListingRow').html(),
            template = Handlebars.compile(source),
            paginationSize = 4, // Hard coded number of subscriptions to show
            html = template({
                    subscriptionsList: subscriptionsResponse.Subscriptions,
                    isDanish : _isDanish
                   });
        
        $subscriptionList.html(html);

        if (_isDanish) {
            $('.danish-info').show();
        } else {
            $('.danish-info').hide();
        }
        // Show only n:'paginationSize' subscriptions and trigger the load more button
        var size = $subscriptionList.children('.subscription').length,
            x = paginationSize;
                
        $subscriptionList.children('.subscription').slice(0, paginationSize).removeClass('disp-none');
        $subscriptionList.addClass('fade-in');
        
        if(_$subscriptionOverlayContainer.data('jqAnimate')) {
            $subscriptionList.removeClass('no-opacity');
        }

        adjustOverlayHeight();
        
        // Dont show the load more if subscription's number is not bigger than paginationSize
        if(size <= x) {
            $('#trigger-load-more').addClass('disp-none');
        }
        
        // Trigger the load-more button event
        $('#trigger-load-more').on('click', function() {
            x = (x + paginationSize <= size ) ? x + paginationSize : size;
            $subscriptionList.children('.subscription').slice(0, x).removeClass('disp-none');
            
            adjustOverlayHeight();
            
            // Dont show the load more if there are not additional subscriptions to show
            if(x === size) {
                $(this).addClass('disp-none');
            }            
        });        
    };
    
    /**
     *  Update the _requestObject after a slider value has been changed
     */
    var checkForChangesAndUpdateRequestObject = function (selector, oldValue, newValue) {
        
        if (oldValue !== newValue) {
            var property = $(selector);
            _requestObject.Profile[selector] = newValue;
                        
            out('checkForChangesAndUpdateRequestObject. Value ' + selector + ' of _requestObject changed from ' + oldValue + ' to: ' + newValue);

            // Update the subscription's list
            getSubscriptions(_requestObject);
        }
    };
    
    /**
     * Closes the subscription overlay and loads a popup when the "help" link in top of the subscription overlay is clicked.
     * Opens the overlay again when the popup is closed.
     */
    var triggerSubscriptionHelp = function () {
        _$subscriptionOverlayContainer.on('click', '#icc-information, #subscription-help, #check-subscriptions-terms', function(event) {
           event.preventDefault();
           var callback = null;
           
           // Only close the overlay and bind a callback if we're on the product page.
           if(S.Config.isTemplateInteraction('productDetailPage')) {
               closeSubscriptionOverlay(_$subscriptionOverlayContainer);
           
               callback = function() {                
                   $('.popup-close, .popup-overlay').one('click', function() {
                       openSubscriptionOverlay(_$subscriptionOverlayContainer);        
                   });
               };
           }
           
           S.Popup.loadByAJAX($(this).attr('href'), null, true, callback, 'xml');
       });
    };
    
    
    /**
     * Separate subscription chooser.
     * Initialise the separate subscription chooser if on the applicable page.
     */
    var initSeparateSubscriptionChooser = function() {

        if(S.Config.isTemplateInteraction('subscriptionChooser')) {            
            
            var $phoneSelection = $('#phone-selection'); // Phone select list.
            
            if($phoneSelection.length) {                
                // URL for getting the predefined subscriptions.
                var href = $phoneSelection.data('href'); 
                                
                // Init jQuery UI selectmenu extended with icons.
                $phoneSelection.iconselectmenu({
                    change: function(event, data) {                        
                        
                        if(_requestObject) {
                            var $phoneSelectionButton = $('#phone-selection-button');
                          
                            _slidersInitialized = false;
                            
                            _selectedSKU = data.item.value;                            
                            _requestObject.Profile.UnitIdentifier = data.item.value;
                            
                            // Update the selected item with appropriate icon.
                            $phoneSelectionButton.attr('style', data.item.element.attr('data-style'));
                            
                            // No phone selected, reset to default icon.
                            data.item.value === '' ? $phoneSelectionButton.removeClass('selected') : $phoneSelectionButton.addClass('selected');
                            
                            var postData = { 'SKU': _selectedSKU };
                                     
                            S.Common.makeAjaxCall(href, postData, getOverlayContent, _$subscriptionOverlayContainer);
                        }
                    }
                });     
                
                var getContentWithParams = function() {
                	var $selectedUsageProfile = $('.amount-of-use .usage-profile.selected');
                	
                	if($selectedUsageProfile.length) {
	                	var	subscriptionRequest = $selectedUsageProfile.data('subscription-request');
	                	
	                    // Update the _requestObject with the default profile
	                    _requestObject = subscriptionRequest;
	                            
	                    out('getContentWithParams. Default request object: ');
	                    out(_requestObject);        
	                    
	                    getParameters();
	                    
	                    out('getContentWithParams. Request object with added parameters: ');
	                    out(_requestObject);  

	                    // Get subscriptions for the default profile
	                    getSubscriptions(_requestObject);
                	}
                	
	                initEventHandlers();
                }
                                
                // SKU to post, if any.
                var sku = getSKU();
                var postData = sku.length ? { 'SKU': sku } : '';
                
                // Get subscriptions for the default profiles.
                S.Common.makeAjaxCall(href, postData, getContentWithParams, _$subscriptionOverlayContainer);
            }
        }
    };
    
    /**
     * Separate subscription chooser.
     * Get the SKU to get the subscriptions for on page load.
     */
    var getSKU = function() {
        var sku = '';
        
        if(/SKU=/.test(window.location.search)) {
            // Split and create an object with key:value pairs from any parameters in the URL. 
            var parameterMap = S.Common.createParameterMap(window.location.search);
            
            if(parameterMap.hasOwnProperty('SKU') && $('#sku-' + parameterMap['SKU']).length) {
                sku = parameterMap['SKU'];
            }            
        }
        
        return sku;
    };
    
    /**
     * Separate subscription chooser.
     * Get any parameters from window.search.location and update the _requestObject if necessary.
     */
    var getParameters = function() {
        // Bluebox uses UnitIdentifer instead of SKU, so we do a replace.
        var searchParameters = window.location.search.replace('SKU', 'UnitIdentifier');
        
        // Split and create an object with key:value pairs from all parameters in the URL. 
        var parameterMap = S.Common.createParameterMap(searchParameters);
            
        if(Object.keys(parameterMap).length) {
	        // If "Profile" is set in the parameters and it corresponds to an existing one, override the default.
	        if(parameterMap.hasOwnProperty('Profile')) {
	            var $profile = $('#' + parameterMap['Profile']); 
	            
	            if($profile.length) {
	                $('.usage-profile', _$subscriptionOverlayContainer).removeClass('selected');
	                $profile.addClass('selected');
	                
	                _requestObject = $profile.data('subscriptionRequest');
	            }
	        }
	        
	        // If a SKU is provided and it exists in the list of available phones, use it.
	        if(parameterMap.hasOwnProperty('UnitIdentifier')) {
	            var $sku = $('#sku-' + parameterMap['UnitIdentifier']);
	            
	            if($sku.length) {
	                var style = $sku.attr('data-style');
	                
	                // Set the selected SKU. 
	                _selectedSKU = parameterMap['UnitIdentifier'];                
	                
	                // Update the icon on the selected phone.
	                $('#phone-selection-button').attr('style', style).addClass('selected');                
	                $('#phone-selection').val(parameterMap['UnitIdentifier']).iconselectmenu('refresh');
	                
	                out('UnitIdentifer (SKU): ' + parameterMap['UnitIdentifier']);
	                
	                // Update the SKU in the request object.
	                _requestObject.Profile.UnitIdentifier = parameterMap['UnitIdentifier'];
	            }
	        }
	        
	        // Use any network IDs specified in the URL.
	        if(parameterMap.hasOwnProperty('NetworkIds')) {
	            var networkIds = []; 
	                
	            // Comma separated list of networks, split on this.
	            if(/,/.test(parameterMap['NetworkIds'])) {
	                networkIds = parameterMap['NetworkIds'].split(',');
	            }
	            else {
	                networkIds.push(parameterMap['NetworkIds']);
	            }
	            
	            // Filter non digit values.
	            networkIds = networkIds.filter(function(operator) {
	                return !isNaN(S.Common.filterInt(operator));
	            });                
	            
	            // Convert to integer.
	            for(var i=0; i<networkIds.length; i++) {
	                networkIds[i] = parseInt(networkIds[i], 10);
	            }
	            
	            out('NetworkIds: ' + networkIds);
	            
	            // Update the network IDs in the request object.
	            _requestObject.Profile['NetworkIds'] = networkIds;       
	        }
	        
	        // Set data usage if defined.
	        if(parameterMap.hasOwnProperty('DataUsage')) {
	            out('DataUsage: ' + parameterMap['DataUsage']);
	                            
	            _requestObject.Profile.DataUsage = normalizeDataUsage(parameterMap['DataUsage']);
	        }
	        
	        // Set customer key if defined.
	        if(parameterMap.hasOwnProperty('CustomerKey')) {
	            out('CustomerKey: ' + parameterMap['CustomerKey']);
	            
	            _requestObject.Profile.CustomerKey = parameterMap['CustomerKey'];
	        }
        }
    };
    
    /**
     * Set up CSS animation support based on browser capabilities.
     */
    var setupAnimSupport = function() {
        var animSupport = S.Common.animationSupport();
        
        // Add CSS animation class if browser supports transform3d.
        if (animSupport.css3d) {
            out('Initiating subscription overlay with transform3d support.');
            _$subscriptionOverlayContainer.addClass('supports3d');
        }
        // Add CSS animation class if browser supports 2d transform.
        else if (animSupport.css2d) {
            out('Initiating subscription overlay with transform support.');
            _$subscriptionOverlayContainer.addClass('supports2d');
        } 
        // No CSS animation support, indicate animation using jQuery.
        else {
            out('Initiating subscription overlay with jQ animation support.');
            _$subscriptionOverlayContainer.data('jqAnimate', true).addClass('jq-animate');
        }
    }
    
    /**
     *  Open the subscription overlay if we are coming from a product listing
     */
    var openIfProductListing = function() {
        if (S.Config.isTemplateInteraction('productDetailPage')) {                
            var urlHash = window.location.hash;
        
            if (urlHash.length > 1 && urlHash === '#StartSubscriptionsOverlay') {
                var href =  $('#see-all-subscriptions').data('href');
                    
                _slidersInitialized = false;
                    
                openSubscriptionOverlay(_$subscriptionOverlayContainer);
                
                // Display subscription's list of the default profile   
                S.Common.makeAjaxCall(href, getOverlayContent, _$subscriptionOverlayContainer);
            }
        }
    }

    return {
        init : function() {
            out('Initiating subscriptions.');
            _isDanish = (globals.subscription.denmarkEnable === "1") ? true : false;
            _showICC  = (globals.subscription.iccEnable === "1") ? true : false;
            setupAnimSupport();
            
            /*
             * Handle new subscription UX events.
             */
            triggerSubscriptionOverlay();
            triggerPricebuttonBox();
            triggerSubscriptionInfoPopup();            
            triggerSubscriptionHelp();
            //preventExtraData();
            
            openIfProductListing();
            initSeparateSubscriptionChooser();
        },
        
        /**
         * Functions for responsive design.
         */
        rwdSetup : function () {
            var $left = $('.subscription-info .subscription-cost .left');
            
            S.RWD.addOnMatch(['M','L','XL'], 
                 function() {
                    var $trigger = $('.subscription-info .see-info.trigger-subscription-info-popup');
                    
                    $left.on('mouseenter', function() {
                        $trigger.show();
                    });
    
                    $left.on('mouseleave', function() {
                        $trigger.hide();
                    });
                }, 
                function() {
                    $left.off();
                }
            );
            
            S.RWD.addOnMatch(['L','XL'], function() {
                $('#trigger-extra-choices').siblings().show();
            });            
            
            // Check if we need to adjust subscription overlay height when we switch media queries.
            S.RWD.addOnMatch(['S','M','L','XL'], function () {
                
                if($('#subscription-overlay-container').data('isShown')) {                
                    adjustOverlayHeight();
                }
            });
        },
        
        checkSubscriptionTriggers : checkSubscriptionTriggers
    };

}(this, Site, jQuery, Site.Common.out));