/***
 * Module JqueryFunctions
 * Module does not provide public methods; it only registers jQuery functions.
 */
Site.JqueryFunctions = (function (window, S, out, $) {
    
    /**
     * Set the height of all selected elements to match the tallest one.
     * Optionally, use the 'prefix' parameter to specify if it should be 'max-height' or 'min-height'.
     * @returns {jQuery}
     */
    $.fn.setMaxHeight = function (margin, prefix) {
        var $this = $(this), 
        	h = 0,
        	margin = margin || 0,
        	prefix = prefix || '';
        
        $this.css({
        	'min-height' : '',        
        	'max-height' : '',
        	'height' : ''
        });
        
        $this.each(function () {
            var height = $(this).height();
            $(this).data('originalHeight', height);            
            if (height > h) {
                h = height;
            }
        });
                
        if(prefix == 'max') {
        	$this.css('max-height', h);
        }
        else if(prefix == 'min') {
        	$this.css('min-height', h);
        }
        else {
        	$this.css('height', h);
        }
        return $this;
    };
    
    
    /**
     * Move element into another element, optionally at specified index.
     * @param {string} newParent The parent element to move target element to.
     * @param {int} [newIndex=0] The desired index that the target element should have within the new parent.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.moveElem = function (newParent, newIndex) { 
        var $this = $(this), p = $this.parent(), i = $this.index();
        
        if ($this.data('moved')) {
            return this;
        }
        
        newParent = $(newParent);
        newIndex = newIndex || 0;
        
        $this.data({
            moved : true,
            restoreMove : function () {
                if (i > 0) {
                    $this.insertBefore(p.children().eq(i));
                } else {
                    $this.prependTo(p);
                }
                $this.data('moved', false);
            }
        });
        
        if (newIndex >= newParent.children().length) {
            newParent.append($this);
        } else {
            $this.insertBefore(newParent.children().eq(newIndex));
        }
        
        return this;
    };


    /**
     * Restore a previously moved element to its original location.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.restoreMove = function () {
        var $this = $(this);
        if ($this.data('moved')) {
            $this.data('restoreMove')();
        }
        return this;
    };


    /**
     * Hide/show content located directly after a trigger element.
     * @param {string} trigger The selector that trigger the element to hide.
     * @param {string} target The target selector to hide.
     * @returns {jQuery} itself, for chaining.
     */
    $.fn.slideTrigger = function (trigger, target) {
        var $trigger = $(trigger),
            $target = $(target);
        
        // Hide all except the first one.
        $target.parent().each(function() {
            var $parent = $(this);
            if($parent.index() > 0)
                $parent.children(target).hide();
            }
        );
        
        $trigger.click( function(event) {
            event.preventDefault();
            $(this).next().toggle(0, function () {
                Site.ProductDetailPage.refreshCurrentTabHeight();
            });
        });
        
        return this;
    };

    /**
     * Reformats all tables on the page to display without being clipped in size S.
     * @param {int} startCol, the offset from the first <th>. 
     * @returns {jQuery} itself, for chaining.
     */ 
    $.fn.reformatTable = function (startCol) {
    	var $this = $(this), 
    		tableClass = $this.attr('class');
    	
    	// Only reformat the table if the browser supports media queries and we have something to reformat.
    	if(Site.RWD.supportsMq && tableClass) {
	    	var startCol = startCol || 0,	    		
	    		thTable = $this.find('th'),
	    		style = '<style> @media all and (max-width: 640px) {';                
	
	        // Does the tableClass contain more than one CSS class? Split and assemble a new string with all the class names.
	        if(tableClass.length > 1) {
	        	var tmp = tableClass.split(' ');
	        	tableClass = '';
	        	for(var i = 0; i < tmp.length; i++) {
	        		tableClass += '.' + tmp[i];
	        	}
	        }
	        else {
	        	tableClass = '.' + tableClass;
	        }
	
	        $(thTable).each( function (index) {    
	        	$this = $(this);
	            style += (tableClass + ' td:nth-of-type(' + (startCol+index+1) + '):before { content: "' + $this.text());
	
	           	if($this.text().trim() !== '') {
	           		style += ':";';
	           	}
	           	else {
	           		style += ';"';
	           	}
	            		 
	            style += ' font-weight: bold; }';
	        });
	        
	        style += '} </style>';
	        
	        $('head').append(style);
    	}    	
        return this;    	
    };


    /**
     * Tabbed behavior for an element having children '.tab' - which have children '.tab-content'.
     * @param {int} [activeIndex=0] What tab index should be initially active. Can pass false to hide all.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.infoTabs = function (activeIndex) {
        out('Initiating infoTabs..');

        var $htmlBody = $('html, body'),
            $this = $(this),
            that = this,
            $tabs = $this.find('.tab'),
            $activeTab = $this.find('.active'),
            $tabList = $tabs.parent(),
            $content = $this.find('.tab-content'),
            activeClass = 'active',
            defaultTabIndex = 0;

        // Tabs might be wrapped or have varying layout.
        var getBaseHeight = function () {
            return parseInt($tabList.outerHeight(true));
        };
        
        var adjustPositions = function () {
            // Absolute content must be placed correctly.
            $content.css('top', (getBaseHeight()-1) + 'px');
            
            // Find out content height so that we can expand wrapper accordingly.
            $this.height(parseInt(getBaseHeight() + $tabs.eq($this.data('activeTab'))
                .addClass(activeClass)
                .children('.tab-content').outerHeight(true)));
        };
        
        // Activate tab at specific index.
        var activateTab = function (i, id) {
            out('Activate tab #' + id + ' (index: ' + i + ')');
            
            //Triggers SiteCatalyst event for clicked tab.
            S.Common.reportMappedAnalyticsEvent($("#"+id).parent().attr("id"));
            
            $this.data('activeTab', i);
            $tabs.removeClass(activeClass);
            adjustPositions();
        };
        
        // Setup click event.
        $this.on('click', '.tab > a', function (event) {
            event.preventDefault();
            activateTab($(this).parent().index(), $(this).attr('id'));
        });

        // Check initial state.
        if (typeof activeIndex === 'number') {
            activateTab(activeIndex);
        } else if (!arguments.length) {
            if ($activeTab.length) {
                activateTab($activeTab.index());
            } else {
                activateTab(defaultTabIndex);
            }
        }

        S.RWD.addOnResize(adjustPositions);
        
        this.activateTabById = function (id) {
            out('Activating tab ' + id);
            var $tab = $('#' + id);
            
            //Triggers SiteCatalyst event for clicked tab.
            S.Common.reportMappedAnalyticsEvent(id);
            
            $tab.length && $htmlBody.animate({'scrollTop' : $tab.offset().top }, 500) && activateTab($tab.index()); 
            return that;
        };
        
        this.refreshHeight = adjustPositions;
        
        return that;
    };
    
    
    /**
     * Apply CSS class for odd table rows.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.stripedTable = function () {
        return $(this).find('tr:even').addClass('odd');
    };
    
     /**
     * Logic for turning an element into a custom checkbox.
     * @param {Boolean} initiallyChecked Whether the checkbox should be checked on page load.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.customCheckbox = function (parent, initiallyChecked) {
        var $this = $(this),
            that = this;
                       
        var check = function (shouldCheck, $elem) {
            if (!$elem) {
                $elem = $this;
            }
            
            if (shouldCheck) {            	
                $elem.addClass('checked').data('checked', true).trigger('checked');               
            } else {            	
                $elem.removeClass('checked').data('checked', false).trigger('unchecked');
            }
        };
        
        if (!that.initiated) {
        	var selector = $this['selector'];
        	        	        	
        	$('body').on('click', selector, function (event) {        		
                check(!$(this).data('checked') ? true : false, $(this));
                event.preventDefault();        
            });
                    	
            // Attach a check-function to each individual checkbox,
            // in case plugin was used on multiple elements.
        	$this.each(function () {
                var chk = $(this);
                chk.data('checked', function (shouldCheck) {
                    check(shouldCheck || false, chk);
                });                
            });
            
            !initiallyChecked ? check() : check(true);
            out('Custom checkbox initiated.');

            that.initiated = true;
        }
        
        return that;
    };
    
    /**
     * Adds a CSS class for highlighting the current hovered row in a table.
     * 
     * @param [className='highlighted'] {String} CSS class name to add to the highlighted row.
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.hoverHighlightTable = function(className) {
        className = className || 'highlighted';
        
        return $(this).on({
            mouseover: function() {
                $(this).parent().addClass(className);
            },
            mouseleave: function() {
                $(this).parent().removeClass(className);
            }
        }, 'td');
    };
    
    /**
     * Determines the store stock for mini products contained in a wrapper class.
     * 
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.getMiniProductStoreStock = function () {
    	var $wrapper = $(this);

    	$wrapper.each( function() {
    		var $this = $(this);
    		
    		if($this.data('store-stock-set') === false || typeof $this.data('store-stock-set') === 'undefined') {    			
    			var products = $this.find('.col-mini-product');	    			
    				    			
    			S.Geolocation.determineStoreStock(products, '#searchProductsInfo', true, false, S.StockFilter.filterStockOnLoad);
    		}    		
    		
    		$this.data('store-stock-set', true);
    	});
    	
		return this;
    };
    
    /**
     * Makes a selection in a dropdown
     * @param {object} event from click 
     */
    $.fn.handleDropdown = function(e) {
        e.preventDefault();
        var $wrapper = $(e.currentTarget),
            $this = $(e.target),
            $option = $this.closest('.dropdown-item, .select-item');

        // Open dropdown
        if ($wrapper.length && $wrapper.hasClass('closed') && !$wrapper.hasClass('setOpen') && !$wrapper.hasClass('one-in-list')) {
            $wrapper.toggleDropdown(false);
            // Focus on the selected radio
            $('input[type="radio"]:checked', $wrapper).focus();
            if ($('input[type="radio"]:checked', $wrapper).is(":focus")) {
                $wrapper.addClass('focused');
            }
            // If this is a touch device, disable hover on drop-down-lists. 
            if (Modernizr.touch) {
                $wrapper.removeClass('hover-enabled');
            }
        }
        
        // Close dropdown
        else if ($option.hasClass('active').length && !$wrapper.hasClass('closed')) {
            $wrapper.toggleDropdown(true);
        }
        
        // Make a selection and close dropdown
        else if (($this.hasClass('dropdown-list, .select-list-wrapper') || $option.length) && !$wrapper.hasClass('closed')) {
            $wrapper.addClass('selected').toggleDropdown(true);
            $option.trigger('click');

            //scroll to dropdown if not longer in viewport
            if (!$wrapper.isOnScreen()) {
                $(window).scrollTop($wrapper.offset().top - 10);
            }
        }
    };
    
    /**
     * Updates the selection in a dropdown
     */
    $.fn.updateSelection = function() {
        var $this = $(this),
            $wrapper = $this.closest(".dropdown-element, .select-element"),
            $item = $(".dropdown-item, .select-item", $wrapper),
            $radio = $('input[type="radio"]', $wrapper),
            $current = $('label[for="'+$this.attr('id')+'"]');

        $item.removeClass('active');
        $radio.prop('checked', false);
        $this.prop('checked', true);
        $current.addClass('active');
    };
    
    /**
     * Toggle a dropdown
     * @param {boolean} false will open, true will close 
     */
    $.fn.toggleDropdown = function(state) {
        var $this = $(this),
            $other = $('.dropdown-element, .select-element').not($this),
            height = $this.outerHeight();
        
        if(!$this.hasClass("setOpen")){
            $this.toggleClass('closed', state);
        }   
        var closeDropdown = function(event) {
            if($(event.target).closest('.dropdown-element:not(.closed), .select-element:not(.closed)').length === 0) {
                $('.dropdown-element:not(.closed), .select-element:not(.closed):not(.setOpen)').addClass('closed');
                
                $('body').off('click', closeDropdown);
            }
        }

        /**
         * Adjust the height when open a dropdown
         * Add/remove event for closing dropdown when outside-click is done
         */
        if ($this.hasClass('closed')) {
            $this.css('min-height', '');
        }
        else {
            $this.css('min-height', height);
            
            //Adjust other dropdowns if the exist
            if ($other.length && !$other.hasClass("setOpen")) {
                $other.addClass('closed').css('min-height', '');
            }
            
            $('body').on('click', closeDropdown);
        }
    };
    
    /**
     * Is element visible in viewport
     * @returns true if element is in viewport 
     */
    $.fn.isOnScreen = function(){

        var win = $(window),
            viewport = {
                top : win.scrollTop(),
                left : win.scrollLeft()
            },
            bounds = this.offset();
        viewport.right = viewport.left + win.width();
        viewport.bottom = viewport.top + win.height();

        bounds.right = bounds.left + this.outerWidth();
        bounds.bottom = bounds.top + this.outerHeight();

        return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
    };
    
    /**
     * Switching text of an element that has data-attribute "original" and "swap" set.
     * @param {object} jQuery-object 
     * @param {string} Send string swap when showing open element
     */
    $.fn.toggleText = function(state) {
        var el = $(this);
        state === 'opened' 
        ? el.text(el.data('swap-text')) 
        : el.text(el.data('original-text'));
    };

    
    /**
     * ECOM-12330 - Binds a submit event handler on the selector(s) (one or many forms). Will if applicable then display a popup containing a password input.
     * Form will only be submitted if the password is correct.
     * 
     * @returns {jQuery} Itself, for chaining.
     */
    $.fn.performPasswordCheck = function() {        
        
        // Only display the popup if the user has the "remember me" cookie set.
        if(S.Common.getCookieValue('HasViewKey') !== null) { 
            var $form; // Holds the form that is to be submitted.
                    
            // Callback to run when popup is displayed.
            var checkPassword = function() {
                
                var onSuccess = function() { 
                    $form.off('submit', authNeeded).submit(); 
                    S.Popup.hide();
                }
                
                if($('#password-check-form').parsley().validate()) {                        
                    S.Validation.validateByAJAX('password-check-form', $('#password-check-form').attr('action'), true, null, onSuccess);
                }                                        
            };         
                    
            var authNeeded = function(event) {                
                $form = $(this);
                
                var authorizationNeeded = $form.data('authorization-needed');
        
                // Check if the data attribute "authorization-needed" is set on the element and is true.
                if(typeof authorizationNeeded !== 'undefined' && authorizationNeeded === true) {
                    event.preventDefault();
                
                    var formIsValid = true; // Default to true, as the form not might be bound to Parsley at all.
                    
                    // Validate the form if it is bound to Parsley.js.
                    if(typeof $form.data('parsley-validate') !== 'undefined') {
                        formIsValid = $form.parsley().validate();
                    }
                    
                    // Continue if the form is valid.
                    if(formIsValid) {
                        
                        // Style popup by adding CSS class "confirm-action".
                        $('#popup-main').addClass('confirm-action');
                        
                        S.Popup.loadByAJAX(globals.passwordCheckPopupUrl, null, true, checkPassword, 'xml', globals.lang.validatePassword);                    
                    }
                }
            };
            
            $(this).on('submit', authNeeded);
        }
        
        return this;
    };
    
    
}(this, Site, Site.Common.out, jQuery));