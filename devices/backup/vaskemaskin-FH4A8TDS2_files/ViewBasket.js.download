// ViewBasket - Backbone.js view for the basket component.
Site.View.Basket = Backbone.View.extend({
    el: '#view-basket',
    initialize: function() {
        this.out = Site.Common.out;
        this.out('Initializing View.Basket...');
        this.listenTo(Site.EventDispatcher, 'change:slotBasket', this.render);
        Site.CheckoutC10.showSavedState('cart-content-wrapper');
        this.toggleStart();
    },
    render: function() {
        this.out('Rendering View.Basket...');
        this.$el.html(Site.CheckoutC10.getContent('slotBasket'));
        Site.CheckoutC10.showSavedState('cart-content-wrapper');
        return this;
    },
    events: {
        'click .add-product-quantity' : 'add',
        'click .subtract-product-quantity' : 'subtract',
        'click .remove-insurance' : 'removeItem',
        'blur .input-product-quantity' : 'update',
        'keypress .input-product-quantity' : 'updateOnEnter',
        'click .cart-toggle-wrapper' : 'toggleCart',
        'click .basket-total' : 'triggerCart',
        'click .dropdown-button' : 'showCoupon'
    },
        
    /**
     * Increases the quantity of a product in the basket.
     */
    add: function(event) {          
        var $input = $(event.currentTarget).prev().children();
        
        this.updateQuantity($input, 1);
    },
    
    /**
     * Decreases the quantity of a product in the basket. 
     */
    subtract: function(event) {        
        var $input = $(event.currentTarget).next().children();    
        
        this.updateQuantity($input, -1);
    },
    
    /**
     * Updates the quantity of a product to the amount entered in the input field.
     */
    update: function(event) {    
        var $input = $(event.currentTarget);
        
        this.updateQuantity($input, 0);
    },
    
    /**
     * Updates the quantity of a product to the amount entered in the input field when the enter key is pressed.
     */
    updateOnEnter: function(event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            
            var $input = $(event.currentTarget);
        
            this.updateQuantity($input, 0);           
        }
    },    
    
    /**
     * Removes a generic item where the remove button/link is wrapped in a form.  
     */
    removeItem: function(event) {          
        var $input = $(event.currentTarget),
            $form = $input.closest('form'),
            url = $form.attr('action'),
            postData = $form.serialize();
     
        Site.CheckoutC10.fetch(url, postData);
    },
    
    /**
     * Changes the quantity of a product.
     * @param {jQuery} $input The input field which value has been changed.
     * @param {number} amount With how much the quantity should be changed.  
     */
    updateQuantity: function($input, amount) {
        var quantity = parseInt($input.val(), 10),
            $inputNewQuantity = $input.parent().siblings('.new-quantity'), 
            currentQuantity = parseInt($inputNewQuantity.val(), 10), // The current quantity.
            maxQuantity = $input.data('max-quantity');
             
        var newQuantity = parseInt(quantity + amount, 10);
        
        // If the new quantity isn't a valid number, set to current quantity.
        if(isNaN(newQuantity) || newQuantity === null || typeof newQuantity === 'undefined') {
            newQuantity = currentQuantity;
        }
        
        if(newQuantity > maxQuantity) {
            newQuantity = maxQuantity;
        }
        
        if(newQuantity < 1) {
            newQuantity = 0;
            
        }

        $input.val(newQuantity);
        $inputNewQuantity.val(newQuantity); 
        
        // Only perform the AJAX call if the quantity has changed.
        if(newQuantity !== currentQuantity) {            
            this.performUpdate($input);
        }
       
    },
    
    /**
     * Performs an AJAX call to change the quantity of a product.
     * @param {jQuery} $input The input field which value has been changed.  
     */
    performUpdate: function($input) {        
        var $form = $input.closest('form'),
            url = $form.attr('action'),
            postData = $form.serializeArray();
            
       Site.CheckoutC10.fetch(url, postData);
    },
    
    /**
     * toggleStart
     */
    toggleStart: function() {
      var $cart = $('.cart-toggle-wrapper'),
          $thisArrow = $cart.find('.arrow span.fa'),
          state = $cart.hasClass('open') ? 'opened' : 'closed';
      
      if(state === "closed"){
          $thisArrow.removeClass('fa-caret-up');            
      }else{
          $thisArrow.addClass('fa-caret-up');
      }
      
    },
    /**
     * toggleCart
     */
    toggleCart: function(event) {
        var $this = $(event.currentTarget),
            $cart = $this.prev('.cart-content-wrapper'),
            $thisArrow = $this.find('.arrow span.fa'),
            state = '',
            $text = $('.text', $this);
        
        $cart.toggleClass('open');
        state = $cart.hasClass('open') ? 'opened': 'closed';
                
        if(state === "closed"){
            $thisArrow.removeClass('fa-caret-up');            
        }else{
            $thisArrow.addClass('fa-caret-up');
        }
        this.toggleCoupon();
                
        // Save state to session
        Site.Common.setSessionItem((globals.templateName + '_cart-content-wrapper'), state, true);
      
      	// Change text
        $text.toggleText(state);
    },
    
    /**
     * triggerCart 
     */
    triggerCart: function() {
        this.$el.find('.cart-toggle-wrapper').trigger('click');
    },
    
    /**
     * toggleCoupon - triggers an event to toggle the coupon.
     */
    toggleCoupon: function() {
        Site.EventDispatcher.trigger('toggle:Coupon');
    }
});