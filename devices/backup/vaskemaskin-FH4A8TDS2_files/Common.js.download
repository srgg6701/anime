/***
 * Module Common
 * Contains functions potentially common to all other modules.
 */
Site.Common = (function (window, S) {
	
    /* Method 'out' will store log messages here. */
    var _logHistory = [];
    
    // True if the browser supports sessionStorage and localStorage.
    var _hasStorage = Modernizr.sessionstorage;
    
    // Create an Options elements that can hold specific configs if necessary 
    var _options = {};
    /**
     * If there is a user email cookie, use its value to populate the 
     * newsletter field in the footer.
     */
    var populateNewsletterEmail = function () {
    	var newsletterField = document.getElementById('newsletterSignupEmailFooter'),
    		email = getCookieValue('newsletter_email');
    	
    	if (newsletterField && email) {
    		newsletterField.value = email.replace(/"/g, "");
    	}
    };
    
    var newsletterCheckbox = function () {
        $('#AddressForm_NewsletterCheckBox').change(function() {
            $('#Input_Newsletter').val($(this).is(":checked"));
        });
    };

    
	/* 
	 *  Gets Session status String from the cookie, used both in login box and Omniture Script 
	 */
	var getSessionStatus = function (onComplete) {
    
	    var sessionStatus = getCookieValue("sessionStatus");
        var sessionHasExpired = getSessionHasExpired();
        var returnType = 0;
				
        // Check if the "remember me" cookie is set.
        if (getCookieValue("HasViewKey")) {
            // If not registered or session has expired     
            if (!sessionStatus || sessionHasExpired) {
                out("Calling UpdateSessionStatus");
                
                /* Changed logic to use jsonp instead since we then got rid of cross-origin problem, see ECOM-7617
                 * The call must be "async: true" because otherwise doesn't work on FF
                 */             
                var ussRequest = $.ajax({
                    url: globals.updateSessionURL,
                    async: true,
                    dataType: "jsonp",
                    jsonp: "ussCallback"
                });
                
                /*
                 * We use the .always() callback to always read the cookie after the request completes, no matter if the it goes through or not.  
                 */
                ussRequest.always(function(data) {
                    if (typeof s !== 'undefined') {
                        void(s.t());
                    }
    
                    sessionStatus = getCookieValue("sessionStatus");
                    
                    if (sessionStatus === null) {
                        sessionStatus = data.sessionStatus;
                    }
                    
                    S.MiniBasket.init('#minibasket-counter');
                    return determineSessionStatus(sessionStatus, onComplete);
                });
            } else {
                S.MiniBasket.init('#minibasket-counter');
                return determineSessionStatus(sessionStatus, onComplete);
            }
        }
                
        // 'HasViewKey' not defined. I.e, we don't have the "remember me" cookie set
        else {
            if (sessionStatus) {
                returnType = sessionHasExpired ? 1 : 2;
            }
            
            if (returnType == 1) {
                removeCookie("SessionExpireTime");
                removeCookie("basketStatus");
            }
            if (returnType == 2) {
                updateSessionExpireTime();
            }
            
            S.MiniBasket.init('#minibasket-counter');
            
            if (returnType == 2) {
                return determineSessionStatus(sessionStatus, onComplete);
            } else {
                return onComplete(false);
            }
        }        
	}
	
    var getSessionHasExpired = function() {
        var sessionExpireTime = getCookieValue("SessionExpireTime");
        var currentTime = new Date().getTime();
        
        return sessionExpireTime ? (sessionExpireTime < currentTime) : false;
    }
    
    var updateSessionExpireTime = function() {
        var currentTime = new Date().getTime();
        var serverSessionTimeout = getCookieValue("ServerSessionTimeout");
        
        if (serverSessionTimeout) {
            setCookie("SessionExpireTime", (currentTime + (serverSessionTimeout * 60 * 1000)), 0);
        }
    } 
    
	// Decodes the sessionStatus cookie and displays the proper menu.    
	var determineSessionStatus = function (sessionStatusCookie, onComplete) {
		if(sessionStatusCookie === null) {
			// sessionStatus null. Not logged in. Display the "Log in" menu link.	
			onComplete(false);		
		}
		else {						
			sessionStatusCookie = decodeSessionStatus(sessionStatusCookie);
			// Get the customers first name from the session status cookie. 
			var firstName = sessionStatusCookie.split('|')[0].split(' ')[0];
			
			// sessionStatus set. We are logged in. Display the "My pages" menu link.
			onComplete(true, firstName);
		}
		
		// Return the sessionStatus cookie
		return sessionStatusCookie;
	}
	
	
	/* 
	 * sessionStatus was first encoded in UTF-8 entities to escape "special" letters like "?" in &#000;
	 * then URLencoded to avoid "&" and ";" to mess with the cookie. Replaces also all "+" with spaces.
	 */			
	var decodeSessionStatus = function (sessionStatusCookie) {
		if(sessionStatusCookie !== null) {
			sessionStatusCookie = decodeURIComponent(sessionStatusCookie).replace(/\+/g," ");
		}
		return sessionStatusCookie;
	}
	
	
	var getLoggedInName = function (sessionStatusCookie) {
		
		if(sessionStatusCookie !== null && typeof sessionStatusCookie !== 'undefined') {
			sessionStatusCookie = decodeURIComponent(sessionStatusCookie).replace(/\+/g," ");
						
		}
		return sessionStatusCookie;
	}

   /**
    * Remove CardDetails Sotred in session if the current page != checkout10.
    * moved from CheckoutC10 (because code is used everywhere but checkout) line : 633
    * @author Andrew Corliss
    */   
   var removeCardSessionObjects = function () {
       var crdSessionValue = sessionStorage.getItem('crdNr'),
           dateSessionValue = sessionStorage.getItem('crdDate');
           typeSessionValue = sessionStorage.getItem('crdType');
           
           if(crdSessionValue !== "" && crdSessionValue !== null){
               sessionStorage.removeItem('crdNr');
           }
           if(dateSessionValue !== "" && dateSessionValue !== null){
               sessionStorage.removeItem('crdDate');
           }
           if(typeSessionValue !== "" && typeSessionValue !== null){
               sessionStorage.removeItem('crdDate');
           }
   }; 
   
   /**
    * Remove Santander SSN.
    * Should be used for all SSNs?
    */   
   var removeSessionSSN = function () {
       var santanderSessionSSN = sessionStorage.getItem('santander_santander_ssn');
           
           if(santanderSessionSSN !== "" && santanderSessionSSN !== null){
               sessionStorage.removeItem('santander_santander_ssn');
           }
   };    
	
	/**
	 * ---- SiteCatalyst ---- 
	 * Called when using the filter menu in Category lvl2 and Search results
	 */
    var trackFilter = function (objectID, linkName, selectedAttribute) {    	    	
    	try {
	    	var s = s_gi(accName);
	    	    	    	
	    	s.linkName = linkName;
	    	s_objectID = objectID;
	    	    	
	    	s.linkTrackVars = "eVar15,events";
	    	
	    	s.eVar15 = selectedAttribute;
	    	
	    	s.linkTrackEvents = "event11";	
	    	s.events = "event11";
	    	    	
	    	s.tl(this,'o',linkName, null, 'navigate');
    	}
    	catch (e) { out(e, 'error'); }
    };
    
    
    /**
     * ---- SiteCatalyst ----
     *
     * Called when adding a product to the basket.
     */    
    var trackBasket = function (sproducts, seVar10, seVar13, seVar76, seVar77, sevents) {
    	try {
	    	var s = s_gi(accName);
	    	
	    	s.linkTrackVars = "events,eVar10,eVar13,eVar76,eVar77,products"; 
	    	s.linkTrackEvents = sevents;	
	    	
	    	s.events=sevents;
	    	s.eVar10=seVar10;
	    	s.eVar13=seVar13;
	    	s.eVar76=seVar76;
	    	s.eVar77=seVar77;
	    	s.products=sproducts;
	    	
	    	s.tl(this,'o', 'AddToBasket');    	
    	}
    	catch (e) { out(e, 'error'); }
    }    
    
    
    /**
     * ---- SiteCatalyst ----
    /**
     * Called when clicking the header or image of a mini-product.
     */    
    var trackLink = function (objectID, linkName, eventName) {    	    	
	    
    	try {
    		var s = s_gi(accName);
	    	
	    	s.linkName = linkName;
	    	s_objectID = objectID;
	    	    	
	    	s.linkTrackVars = "events";
	    	s.linkTrackEvents = eventName;	
	    	s.events = eventName;
	    	
	    	s.tl(this,'o',linkName, null, 'navigate');
    	}
    	catch (e) { out('Error in Site.Common.trackLink(): ' + e.message, 'error'); }
    };
    
    /**
     * Triggers SiteCatalyst events for tabs on the Product detail page.
     */    
    var reportMappedAnalyticsEvent = function (id) {    	
    	var linkName = '';
    	
    	if (id == 'tab-specs') {
    		linkName = 'Specifications Tab';    		
    		trackLink(linkName, linkName, 'event6');
    	}
    	else if (id == 'tab-bundles') {
    		linkName = 'Bundles Tab';    		
    		trackLink(linkName, linkName, 'event34');		
    	}
    	else if (id == 'tab-ratings-reviews') {
    		linkName = 'Ratings & Reviews Tab';    		
    		trackLink(linkName, linkName, 'event35');
    	}
    	else if (id == 'tab-ask-answer') {
    		linkName = 'Ask & Answer Tab';    		
    		trackLink(linkName, linkName, 'event36');	
    	}
    	else if (id == 'tab-more-info') {
    		linkName = 'More Information Tab';
    		trackLink(linkName, linkName, 'event37');		
    	}
    	else if (id == 'tab-store-availability') {
    		linkName = 'Brick Store Stock Tab';
    		trackLink(linkName, linkName, 'event38');		
    	}
    	else if (id == 'tab-inspiration') {
    		linkName = 'Inspiration Content Tab';
    		trackLink(linkName, linkName, 'event39');
    	}
    };  
    
	
    /**
     * Better typeof implementation that reveals additional data types.
     * 
     * @param {any} val Any value to type-check.
     * @return {string} Name of the detected data type.
     */
    var typeOf = function (val) {
        if (typeof val === 'object') {
            return ({}).toString.call(val).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
        }
        return typeof val;
    };


    /**
     * Takes any string and converts it to a safe representation. Spaces will 
     * become '_' and non a-z chars will become their charcode equivalent.
     * @param {string} str The string to convert.
     * @returns {string} The converted string.
     */
    var safeString = function (str) {
        return str.replace(/[^a-z0-9]/g, function(s) {
            var c = s.charCodeAt(0);
            if (c === 32) return '-';
            if (c >= 65 && c <= 90) return '_' + s.toLowerCase();
            return '__' + ('000' + c.toString(16)).slice(-4);
        });
    };


    /**
     * Returns the string value of an address field query string parameter.
     * @param {string} name Query string parameter name.
     * @returns {string} The parameter value.
     */
    function getParam(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    /**
     * @param {string} url the URL to get the HTML from.
     * @param {string} id the CSS id to append the HTML to.
     * @param {function} onSuccess Callback function to invoke on success.
     * @returns {undefined}
     */
    var getHtmlWithAjax = function(url, id, onSuccess) {  
        $.get(url, function(data) {
            $("#"+id).html(data);
            if (onSuccess) { onSuccess(); }
        });        
    };
    
    /**
     * Logs messages to the console if logging config constant is true.
     * 
     * @param {string} msg The message to output.
     * @param {string} [severity=log] The severity level of the console message. (log)
     * @param {boolean} [force=false] Force output regardless of devMode.
     */
    var out = function (msg, severity, force) {
        if (this.console) {        	
            severity = severity || 'info';
            if (!console[severity]) { severity = 'log'; } // Fallback.
            (S.Config.consoleLogging || force)
                && console[severity](msg);
        }
        
        _logHistory.push({ msg : msg, severity : severity });
    };
    
    
    /**
     * Dumps all recorded log messages into the console. Overrides devMode.
     */
    var dumpLogs = function () {
        var logEntry, numLogs = _logHistory.length;
        out('Dumping log messages..', 'info', true);
        for (var i = 0; i < numLogs; i++) {
            logEntry = _logHistory[i];
            out(logEntry.msg, logEntry.severity, true);
        }
    };
    
    /**
     * Sets a cookie.
     * @param {string} key The name of the cookie.
     * @param {string} value The value of the cookie.
     * @param {int} days The lifetime of the cookie. Optional. Defaults to one year if missing. Set to zero if a session cookie should be set.
     * @param {boolean} secure Set secure flag on cookie. Defaults to true.
     */
     var setCookie = function (key, value, days, secure) {
    	 secure = secure === false ? false : true;  	     
    	 
         var days = days === 0 ? 0 : (days || 365);
         var maxAge = days > 0 ? "; max-age=" + (days * 24 * 60 * 60) + "; " : "; ";
         
         var expiryDate = new Date();
         expiryDate.setTime(expiryDate.getTime() + (days * 24 * 60 *60 * 1000));         
         var expires = "; expires=" + days === 0 ? ";" : expiryDate.toUTCString();
             
         var cookie = encodeURI(key) + "=" + encodeURI(value) + maxAge + expires + "; path=/";
         
         if(secure) {
        	 cookie = cookie + "; secure"; 
         }
         
         document.cookie = cookie;
     };
    
     /**
      * Sets a cookie.
      * @param {string} key The name of the cookie.
      * @param {string} value The value of the cookie.
      * @param {int} days The lifetime of the cookie. Optional. Defaults to one year if missing. Set to zero if a session cookie should be set.
      * @param {boolean} secure Set secure flag on cookie. Defaults to true.
      */
     var setCookieEncoded = function (key, value, days, secure) {
    	 secure = secure === false ? false : true;
    	 
         var days = days === 0 ? 0 : (days || 365);
         var maxAge = days > 0 ? "; max-age=" + (days * 24 * 60 * 60) : "; ";
         
         var expiryDate = new Date();
         expiryDate.setTime(expiryDate.getTime() + (days * 24 * 60 *60 * 1000));         
         var expires = "; expires=" + days === 0 ? ";" : + expiryDate.toUTCString();
         
         var cookie = encodeURIComponent(key) + "=" + encodeURIComponent(value) + maxAge + expires + "; path=/";
         
         if(secure) {
        	 cookie = cookie + "; secure"; 
         }
         
         document.cookie = cookie;
     };
    
    /**
     * Returns the value of a cookie.
     * @param {string} key The name of the cookie to get.
     */
    var getCookieValue = function (key) {    	
        var currCookie,
            keyEQ = key + "=",
            cookieList = document.cookie.split(';');

            for(var i = 0; i < cookieList.length; i++) {
                currCookie = cookieList[i];
                
                while (currCookie.charAt(0) === ' ') {
                    currCookie = currCookie.substring(1, currCookie.length);
                }
                if (currCookie.indexOf(keyEQ) === 0) {
                    return decodeURI(currCookie.substring(keyEQ.length, currCookie.length));
                }
            }
            return null;
    };
    
    /**
     * Removes a cookie.
     * @param {string} key The name of the cookie to be removed.
     */
    var removeCookie = function (key) {
    	setCookie(key,'',-1);
    }        
    
    /**
     * Check if the "cookieconsent" cookie is set, and if cookie information is enabled in BO. 
     * Only if the cookie isn't set and the preference is enabled, we display the cookie information layer at the bottom of the page.
     */
    var showCookieConsent = function () {    	
		var cookieConsent = getCookieValue('cookieconsent');
		
		if((cookieConsent === undefined || cookieConsent !== 'yes') && globals.cookieConsent['enabled'] === '1') {
			$('.cookie-info-layer').show();									
		}
	}
       
    
    /**
     * Enable devMode to see more detailed console messages.
     * @param {boolean} enable Enable or disable.
     */
    var enableDevMode = function () {
        if (Modernizr.localstorage) {
            localStorage.setItem(S.Config.devModeKey, 1);
            out('devMode activated. Refresh your browser to see log messages.');
        } else {
            out('Your browser does not support localStorage, try setting a cookie or query string param instead.');
        }
    };
    
    
    /**
     * Check if devMode is currently enabled. It checks for cookie, localStorage and query string param.
     * @return {boolean}
     */
    var isDevMode = function () {
        
        var hasCookie = function () {
            return parseInt(getCookieValue(S.Config.devModeKey), 10) === 1
                ? true
                : false;
        };
        
        var hasLocalStored = function () {
        	
        	/*
        	 * If cookies are disabled, localStorage won't work either.
        	 * If this is the case, we just catch any error thrown and continue.
        	 */        	
        	try { 
        		if (!window.localStorage) { return false; }
        	
	            var ls = localStorage.getItem(S.Config.devModeKey);
	            
	            if (!ls) { // Enforce false.
	                ls = 0; 
	            } else {
	                // Some browsers convert booleans to strings in localStorage.
	                switch(parseInt(ls)) {
	                    case 0 : ls = false; break;
	                    case 1 : ls = true; break;
	                    default : ls = ls;
	                }
	            }
	            return ls;
	        }
        	catch (error) {}
        };
        
        var hasQueryStringParam = function () {
            return parseInt(getParam(S.Config.devModeKey), 10) === 1
                ? true
                : false;
        };
        
        if (hasQueryStringParam() || hasLocalStored() || hasCookie()) {
            return true;
        } else {
            return false;
        }
    };
    
    
    /**
     * Uses function out to log an error message. If halt is true, Config.consoleLogging is ignored.
     * 
     * @param {string} msg The error message to output.
     * @param {boolean} [halt=false] Whether code execution should be halted upon error. (false)
     */
    var outError = function (msg, halt) {
        halt = halt || false;
        if (halt) { throw msg; } 
        else { this.out(msg, "error"); }
    };
    
    
    /**
     * Check if an expression is true/false.
     * 
     * @param {boolean} success The expression to check.
     * @param {string} [description=''] A description of the expression being checked. ('')
     * @return {boolean}
     */
    var assert = function (success, description) {
        description = description || '';
        this.out((success ? 'PASS: ' : 'FAIL: ') + description);
        return success ? true : false;
    };
    

    /**
     * Check if dev mode cookie is set.
     */
    (function (devMode) {
        if (devMode) { 
            S.Config.consoleLogging = true; 
            out('Devmode is enabled.');
        }
    })(isDevMode());
    
    /**
     * Get the media query size used by the user
     */
    var getMediaQuerySize = function () {
    	var criteoDeviceType = 'd';
    	
        if(S.RWD.isMqMatching('S')) {
            criteoDeviceType = 'm';
        }
        else if(S.RWD.isMqMatching('M')) {
            criteoDeviceType = 't';
        }
        else if(S.RWD.isMqMatching('L') || S.RWD.isMqMatching('XL')) {
            criteoDeviceType = 'd';
        }
        
     return criteoDeviceType;
    }
    
    /**
     * Object containing functions for getting, setting and removing items from browser storage. Uses jStorage if native storage isn't available.
     */
    var browserStorage = {
            
            /**
             * Tries to set a key - value pair in localStorage if available in the browser. If not supported it's set using the jStorage JavaScript library.
             * @param {string} key
             * @param {string} value
             * @param {boolean} session If true, set value in sessionStorage
             */
            set : function (key, value, session) {
                var storageType = '';          
                
                if(_hasStorage) {
                    if(session) {
                        sessionStorage.setItem(key, value);
                        storageType = 'sessionStorage';
                    }
                    else {
                        localStorage.setItem(key, value);
                        storageType = 'localStorage';
                    }           
                }
                else {
                    $.jStorage.set(key, value);
                    storageType = 'jStorage';
                }
                
                out('Key "' + key + '" with value "' + value + '" has been set in ' + storageType);
            },
            
            /**
             * Tries to retrieve the value belonging provided key from storage. Default is localStorage - if not supported we try and get it using the jStorage JavaScript library.
             * @param {string} key The key to get
             * @param {boolean} session If true, get value from sessionStorage 
             */
            get : function (key, session) {
                var storedObject = null,
                    storageType = '';
                
                if(_hasStorage) {    
                    if(session === true) {
                        storedObject = sessionStorage.getItem(key);                        
                        storageType = 'sessionStorage';
                    } 
                    else {
                        storedObject = localStorage.getItem(key);                        
                        storageType = 'localStorage';
                    }
                }
                else {
                    storedObject = $.jStorage.get(key);
                    storageType = 'jStorage';          
                }               
                
                if(storedObject === null) {
                    storedObject = undefined;           
                    out('"' + key + '" not set in ' + storageType + '. Returning "undefined".');
                }
                else {
                    out('Got "' + key + '" from ' + storageType);
                }
                
                return storedObject;        
            },
    
            /**
             * Tries to remove the provided key from localStorage. If storage isn't available we try to remove it using the jStorage library. 
             * @param {string} key The key of the object to be deleted. 
             * @param {boolean} session If true, remove value from sessionStorage 
             * @returns {undefined}
             */            
            remove : function(key, session) {
                var storageType = '';                
                
                if(_hasStorage) {
                    if(session === true) {
                        sessionStorage.removeItem(key);
                        storageType = 'sessionStorage';                        
                    }
                    else {
                        localStorage.removeItem(key);
                        storageType = 'localStorage';                        
                    }
                }
                else {
                    $.jStorage.deleteKey(key);
                    storageType = 'jStorage';                    
                }
                out('Removed "' + key + '" from ' + storageType);
            }
    }
    
    /**
     * Sets an item in localStorage
     */
    var setItem = function (key, value) {
        browserStorage.set(key, value, false);
    }
    
    /**
     * Gets an item from localStorage
     */    
    var getItem = function (key) {
        return browserStorage.get(key, false);
    }

    /**
     * Removes an item from localStorage
     */    
    var removeItem = function (key) {
        return browserStorage.remove(key, false);
    }
    
    /**
     * Sets an item in sessionStorage
     */
    var setSessionItem = function (key, value) {
        browserStorage.set(key, value, true);
    }
    
    /**
     * Gets an item from sessionStorage 
     */
    var getSessionItem = function (key) {
        return browserStorage.get(key, true);
    }
    
    /**
     * Removes an item from sessionStorage
     */    
    var removeSessionItem = function (key) {
        return browserStorage.remove(key, true);
    }           
    
    /**
     * Make an ajax call
     * @param {string} href Url to send the ajax request
     * @param {function} callback Callback function to call when ajax request is completed
     * @param {string | object } htmlId Html id where to replace the html returned from the ajax call 
     * @param {string} logMsg String msg added to the log
     * @param {object} callbackParameters Object passed to the callback function of the ajax request
     * @returns {ajax request object}
     */   
    var makeAjaxCall = function (href, postData, callback, htmlId, logMsg, callbackParameters) {
        var $loader = $('.ajax-loader');       
        
        showAjaxLoader($loader);
        
        if(logMsg !== null) {
            out('Ajax call to ' + href + ' ' + logMsg);
        }
        else {
            out('Ajax call to ' + href);
        }
        
        var request = $.ajax({
            url: href,
            data: postData,
            method: 'POST',
            dataType: 'html'
        });
        
        // Things to always do.
        request.always(function() {
            hideAjaxLoader($loader);
        });
        // End of the Ajax call
                                
        // Things to be done if the request is successful.
        request.done(function(data) {
            if(typeof htmlId === 'object' && htmlId !== null){
                htmlId.html(data);
            }
            else if (typeof htmlId === 'string'){
                $(htmlId).html(data);
            }
            
            if(callback !== null){
                if(typeof callback === 'function'){
                   if(typeof callbackParameters === 'object' ){
                     callback(callbackParameters); 
                   }
                   else{
                     callback();
                   }
                }
            }
        });

        // Things to be done if the request fails.
        request.fail(function(data) {
            out('Request fail');
        });

        return request;
    }
        
    var hideAjaxLoader = function ($container) {        
        var $container = $container || $('.ajax-loader');
        
        if($container.length) {            
            $container.addClass('disp-none');
        }
    }
    
    var showAjaxLoader = function ($container) {
        var $container = $container || $('.ajax-loader');
        
        if($container.length) {
            $container.removeClass('disp-none');
        }
    }
    
    /**
     * Handlebars Helpers definition
     * enabled only when the handlebar object is defined since its used only in some pages
     */
    var handleBarsHelpers = function(){
        if(typeof(Handlebars) === 'object' ){
            Handlebars.registerHelper('compare', function (lvalue, operator, rvalue, options) {
                
                var operators, result;
                
                if (arguments.length < 3) {
                    throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
                }
                
                if (options === undefined) {
                    options = rvalue;
                    rvalue = operator;
                    operator = "===";
                }
                
                operators = {
                    '==': function (l, r) { return l == r; },
                    '===': function (l, r) { return l === r; },
                    '!=': function (l, r) { return l != r; },
                    '!==': function (l, r) { return l !== r; },
                    '<': function (l, r) { return l < r; },
                    '>': function (l, r) { return l > r; },
                    '<=': function (l, r) { return l <= r; },
                    '>=': function (l, r) { return l >= r; },
                    'decimal': function (l, r) { return (/^\d+(\,\d+)+$/.test(l)); },
                    'typeof': function (l, r) { return typeof l == r; }
                };
                
                if (!operators[operator]) {
                    throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
                }
                
                result = operators[operator](lvalue, rvalue);
                
                if (result) {
                    return options.fn(this);
                } else {
                    return options.inverse(this);
                }

            });        
            
            /**
             * Returns a value from the globals object.
             */
            Handlebars.registerHelper('getFromGlobals', function (key, subkey) {
                
                if(typeof globals[key] !== 'undefined' && typeof globals[key][subkey] !== 'undefined') {
                    return globals[key][subkey];
                }
                
                return '';
            });
            
            /**
             * Used to create a safe string inside a Handlebars template.
             */
            Handlebars.registerHelper('safeString', function (str) {
               return S.Common.safeString(str);
            });
            
            /**
             * String replace in a Handlebar template.
             */
            Handlebars.registerHelper('replace', function (str, substr, newSubstr) {
                var regexp = new RegExp(substr, 'g');
                return str.replace(regexp, newSubstr);
            });
            
            /**
             * Math functionality in handlebars template
             */
            Handlebars.registerHelper("math", function(lvalue, operator, rvalue, options) {
                lvalue = parseFloat(lvalue);
                rvalue = parseFloat(rvalue);
                    
                return {
                    "+": lvalue + rvalue,
                    "-": lvalue - rvalue,
                    "*": lvalue * rvalue,
                    "/": lvalue / rvalue,
                    "%": lvalue % rvalue
                }[operator];
            });
        }
    }

    /**
     * @property {Object} animationSupport Browser CSS transform capabilities.
     */
    var animationSupport = function () {
    	var animSupport = {};
    
        animSupport.css3d = Modernizr.csstransforms3d;
        animSupport.css2d = Modernizr.csstransforms;
        animSupport.transitions = Modernizr.csstransitions;
        return animSupport;
    }
    
    /**
     * @param {string|object} element The element that should have the 'no-hover' class.
     */
    var noHover = function (element) {
        if(Modernizr.touch === true) {
            if(typeof element === 'string') {
                element = $(element);
            }
            
            element.addClass('no-hover');
        }
    }
    
    /**
     * Determine the mobile operating system.
     * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.
     *
     * @returns {String}
     */
    function getMobileOperatingSystem() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;

          // Windows Phone must come first because its UA also contains "Android"
        if (/windows phone/i.test(userAgent)) {
            return "Windows Phone";
        }

        if (/android/i.test(userAgent)) {
            return "Android";
        }

        // iOS detection from: http://stackoverflow.com/a/9039885/177710
        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
            return "iOS";
        }

        return "unknown";
    }    
    
    /**
     * Detect touch device.
     */
    var isTouch = function () {
        var isMobileDevice = getMobileOperatingSystem(),
            isMobileDeviceCheck = 0,
            isTouchClass = "unknown";

        if(Modernizr.touch === true && isMobileDevice != "unknown") {
            $("body").addClass('is-touch-device');
            isTouchClass = "is-touch-device";
        }else if(isMobileDevice == "unknown"){
            $("body").addClass('is-touch-active');
            isTouchClass = "is-touch-active";
            
            window.addEventListener('touchstart', function(e) {
                $("body").addClass('is-touch-device');
            }, false);            
        }

        $(".is-touch-device").mousemove(function( event ) {
            if(isMobileDeviceCheck != 1){
                isMobileDevice = getMobileOperatingSystem(); 
            }
            if(Modernizr.touch && isMobileDevice == "unknown"){
              $("body, div").removeClass("is-touch-device");
              Modernizr.touch = false;
            }
            isMobileDeviceCheck = 1;
        });
        
        return isTouchClass;
    }
    
    
    /**
     * Create a spinner
     * @param {object} element - jQuery-element that should have a spinner .
     */
    var createSpinner = function(element) {
        
        var content = '<div class="spinner-overlay hide">'+
                          '<span class="ajax-loader">'+
                              '<span class="fa fa-spinner fa-pulse"></span>'+
                          '</span>'+
                      '</div>';
        
        element.prepend(content);
        
        requestAnimationFrame(function() {
            $('.spinner-overlay').removeClass('hide');
            $('.main-content > div').addClass('loading');
        });
    }
    
    /**
     * Remove a spinner
     * @param {object} element - jQuery-element that should have the spinner removed.
     */
    var removeSpinner = function(element) {
        var $page = $('.main-content > div'),
        $spinnerOverlay = $('.spinner-overlay');
        
        if (element !== undefined) {
            $spinnerOverlay = $('.spinner-overlay', element);
        }
    
        requestAnimationFrame(function() {
            $spinnerOverlay.addClass('hide');
            $page.removeClass('loading');
        });
    
        setTimeout(function() {
            $spinnerOverlay.remove();
        }, 200);
    }
    
    /**
     * Expandable boxes
     */
    var expandBox = function() {
        // ECOM-15347
        // Removing return false statement to allow user to click links presented in promotions
        // Retargeting jQuery listener to ensure box only opens/closes on header click
        
        $("body").on('click','.expandable-box .box-header', function(event) {
            $this = $(event.currentTarget);
            $this.parent().toggleClass("open");
        });

        // Set box to open if there's no header
        $(".expandable-box:not(.open) .box-header").each(function(){
           if($(this).html().length < 5){
               $(this).parent().addClass("open");
           } 
        });
    }  
    
    /**
     * Reset button loading state
     */
    var resetButton = function(element) {
        var $this = $(element);
        setTimeout(function(){
            $this.removeClass("loading");            
        },500);
    } 
    
    /**
     * Reset button loading state - general, ignoring buttons with "add-to-basket" class.
     */
    var resetButtonLoading = function() {
        setTimeout(function(){
            $(".el-button:not(.add-to-basket, .collect-at-store-button)").removeClass("loading");            
        },3000);
    } 
    
    /*
     * Open a drop-down-button-component
     */
    var dropdownButton = function() {
        $('body').on('click', '.dropdown-button', function() {
            var $this = $(this),
                $dropdown = $this.closest('.dropdown-button-wrapper'),
                $text = $('.text', $this),
                state = '';

            $dropdown.toggleClass('open');
            
            if ($dropdown.hasClass('reversed')){
                var $dropdownContent = $dropdown.prev('.dropdown-content-wrapper');
                $dropdownContent.toggleClass('open');
            } 
            
            S.EventDispatcher.trigger('toggle:' + $dropdown.attr('id'));
            
            state = $dropdown.hasClass('open')? 'opened': 'closed';
            
            //Change text
            $text.toggleText(state);
            
            //Save state to session
            if ($dropdown.attr('id')) {
                Site.Common.setSessionItem((globals.templateName + '_'  +  $dropdown.attr('id')), state);
            }
        });
    }
    
    /*
     * Toggle Seller rating in mobile layout
     */
    var sellerRating = function() {
        $('body').on('click', '.seller-rating', function() {
            var $this = $(this);
            
            if(Site.RWD.isMqMatching(['M','S']) || Modernizr.touch) {
                $this.toggleClass('open');
            }
        });
    }
    
    /*
     * Create seller popup
     */
    var sellerName = function() {
        $('body').on('click', '.seller-name a', function (event) {
            var $this = $(this);
            event.preventDefault();
            
            Site.Popup.loadByAJAX($this.data('href'), null, true, null, 'html', $this.data('heading'));
        });
    }
    
    /**
     * Selectlist with details - Single elements
     */
    var selectListWD = function(element) {
        // ECOM-15357
        // Only to use for ONE element at the time
        if(typeof element === 'string') {
            $this = element;
        }else{
            $this = $(".select-element-with-details");
        }
        
        if($this.find("label").length < 2){
            $this.addClass("one-in-list");
        }
        if($("#klarna-account-info-select input[name*='Pay in X']").length){
            $("#klarna-account-info-select input").prop("checked", false);
            $("#klarna-account-info-select input[name*='Pay in X']").prop("checked", true);
        }
        
        $this.next(".display-label-details").html($this.find("input:checked").next().find(".label-details").html());
        
        $this.find("label").click(function(element){
            $element = $(element.currentTarget);
            $this.next(".display-label-details").html($element.find(".label-details").html());

            $this.find("input:not(:checked)").next().removeClass("active");
            $this.find("input:checked").next().addClass("active");

            if(!$element.hasClass("active")){
                $this.addClass("closed");
            }else if($this.hasClass("closed")){
                $this.removeClass("closed");
            }
        });
        
        $this.find(".select-list-default-text").click(function(){
            $this.removeClass("closed");
        });

    }    

    /**
     * common select list
     */
    var selectListCommon = function(element) {
        // ECOM-18321
         
        $("body").on('click', '.select-element-common label', function(event) {
            event.stopPropagation();
            $element = $(event.currentTarget);
            $elementWrapper = $element.parent().parent().parent();
            $otherElements = $(".select-element-common").not($elementWrapper);
                
            $elementWrapper.find("input:not(:checked)").next().removeClass("active");
            $elementWrapper.find("input:checked").next().addClass("active");

            if(!$elementWrapper.hasClass("closed")){
                $(".select-element-common:not(.closed)").not($elementWrapper).addClass("closed");
            }
            $otherElements.addClass("closed");
            
            if(!$element.hasClass("active")){
                $elementWrapper.addClass("closed");
            }else if($elementWrapper.hasClass("closed")){
                $elementWrapper.removeClass("closed");
            }
            
            if($element.hasClass("select-list-default-text") && $elementWrapper.hasClass("closed")){
                $elementWrapper.removeClass("closed");
            }
            
        });
        
    }    
    
    /**
     * Tests if a string is a number or not.
     * @param {string} A string to test against
     * @returns {number} Returns the input value as a number if true, NaN if not.
     */
    var filterInt = function (value) {
        if(/^(\-|\+)?([0-9]+|Infinity)$/.test(value)) {
          return Number(value);
        }
        return NaN;
    }    
    
    /**
     * Creates a key:value object map of a string of the form ?key1=value1&key2=value2
     * @param {string} str A string  
     * @retuns {object} parameterMap An object containing key:value pairs extracted from the string.
     */
    var createParameterMap = function(str) {
        var parameterMap = {};
   
        if(str.length) {            
            var arr = str.substr(1).split('&');
            
            for(var i=0; i<arr.length; i++) {
                var tmp = arr[i].split('=');
                
                if(tmp[0] && tmp[1]) {  
                    var number = filterInt(tmp[1]);
                    
                    parameterMap[tmp[0]] = isNaN(number) ? tmp[1] : number;
                }
            } 
        }
        
        return parameterMap;
    }   
    
    
    /* Set a element to fixed when scrolling down on it.
     * elementID should be the ID of the box that should be set to fixed.
     * Right above your elementID you should have a DIV like this: <div id="elementID-point" class="v-hidden"></div>
     * onSize needs to be the RWD.isMqMatching sizes you want to aim on: "['M','S']"
     */
    var setElementToFixed = function(elementID, onSize, classToAdd){
        if(S.RWD.isMqMatching(onSize)) {
            var $fixElement = $('#'+elementID),
                $fixPoint = $('#'+elementID+'-point'),
                $fixPointPosition = $fixPoint.offset().top,
                setHeight = $fixElement.height();

            $(window).bind('scroll', function(){
                if(!$fixElement.hasClass(classToAdd) && ($(window).scrollTop() > ($fixPointPosition))) {
                    if(S.RWD.isMqMatching(onSize)) {
                        $fixElement.addClass(classToAdd);
                        $fixPoint.height(setHeight);
                    }
                }else if($fixElement.hasClass(classToAdd) && ($(window).scrollTop() < ($fixPointPosition))){
                    $fixElement.removeClass(classToAdd);
                    $fixPoint.height(0);
                }
            });
        };
    }
        
    /*
     * Fixed mobile header - ECOM-16746
    */
    var fixedMobileHeader = function(){
        if(S.RWD.isMqMatching(['M','S'])) {

            var tId = null,
                $siteBody = $('body'),
                $headerWrapper = $('.header-wrap'),
                $head = $headerWrapper.find('.master-head'),
                $logo = $head.find('.logo-container'),
                $headerMessage  = $head.find('.header-message'),
                $sidebar = $headerWrapper.find('.sidebar.col'),
                $sidebarList = $sidebar.find('.link-list'),
                hasSidebar = $sidebar.length,
                $foldMenu = $sidebar.find('.fold-menu'),
                $foldMenu = hasSidebar? $sidebar.find('.fold-menu') : $('.master-main .fold-menu'),
                $dropMenu = $("nav.fold-menu"),
                $foldMenuOverlay = $("#fold-menu-overlay"),
                prevYOffset = 0,
                scrollClass = "fixed-header",
                scrollPosition = 0;
                extH = 0,
                headH = 0,
                _h = 0,
                resize = function() {
                    if($headerMessage.length){
                        extH = $logo.outerHeight() - 8 + $headerMessage.outerHeight();
                    }else{
                        extH = $logo.outerHeight() - 8;
                    }
                    extMH = $(".menu-trigger").outerHeight();
                    headH =  $head.height();
                    _h = headH - extH + 5;
                    if (window.innerWidth > 800) {
                        $headerWrapper.attr('style', null);
                        $dropMenu.css("top", "");
                    }
                };

            resize();
                
            scrollHeader = function() {
                if (S.RWD.isMqMatching(['L','XL'])) {
                    $head.attr('style', "");
                    $headerWrapper.removeClass(scrollClass);
                    $siteBody.removeClass(scrollClass);
                    $headerWrapper.css("paddingTop", "");
                    $head.removeClass('scroll-back');
                    $siteBody.removeClass('o-hidden');
                // If mobile (max 800px)                    
                } else if(!$siteBody.hasClass("added-to-cart")){
                    // Scrolling up
                    if (prevYOffset > window.pageYOffset) {  
                        // Checking if menu is closed
                        if (!$dropMenu.hasClass('unfold')) {
                            if(scrollPosition < extH && scrollPosition >= 0){
                                $headerWrapper.removeClass(scrollClass);
                                $siteBody.removeClass(scrollClass);
                                $headerWrapper.css("paddingTop", "");
                                $head.removeClass('scroll-back');
                                $head.css("top", "");

                                setTimeout(function(){
                                    if(scrollPosition === 0){
                                        $head.css("top", "0px");
                                    }
                                }, 100);
                                
                            // Checking if header out of view
                            }else if(scrollPosition > headH){
                                $headerWrapper.addClass(scrollClass);
                                $siteBody.addClass(scrollClass);
                                $headerWrapper.css("paddingTop", headH);
                                $head.addClass('scroll-back');
                                $head.css("top", -extH);

                                setTimeout(function(){
                                    if(scrollPosition === 0){
                                        $head.css("top", "0px");
                                        $headerWrapper.removeClass(scrollClass);
                                        $siteBody.removeClass(scrollClass);
                                        $headerWrapper.css("paddingTop", "");
                                        $head.removeClass('scroll-back');
                                    }
                                }, 100);
                                
                             }
                            $siteBody.removeClass('o-hidden');
                        }else{
                            if($headerWrapper.hasClass(scrollClass)){
                                $siteBody.addClass('o-hidden');
                            }
                        }

                        scrollPosition = window.pageYOffset;
                            
                    // Scrolling down
                    } else if (prevYOffset < window.pageYOffset) {  
                        if (!$dropMenu.hasClass('unfold')) {
                            if(scrollPosition > headH){
                            // Hiding header
                                $head.css("top", -(headH+10));
                            }

                            $siteBody.removeClass('o-hidden');
                        }else{
                            if($headerWrapper.hasClass(scrollClass)){
                                $siteBody.addClass('o-hidden');
                            }
                        }

                        scrollPosition = window.pageYOffset;
                    }
                }
                
                prevYOffset = window.pageYOffset;
                
                
            };

            scrollHeader();

            $(window).on('resize', function() {
                if (tId) clearTimeout(tId);
                    tId = setTimeout(function() {
                    resize();
                    clearTimeout(tId);
                    tId = null;
                }, 300);
            });
            
            $(window).on('scroll', scrollHeader);

            $('.menu-toggle').on('click', function() {
                if(S.RWD.isMqMatching(['M','S'])) {
                    scrollPosition = window.pageYOffset;
                    
                    setTimeout(function(){
                      if ($foldMenu.hasClass('unfold')) {
                        $sidebar.addClass('opened');
                      } else {
                        $sidebar.removeClass('opened');
                        
                        if (window.pageYOffset < headH) {  
                            $head.css("top", "");
                            $headerWrapper.css("paddingTop", "").removeClass(scrollClass);
                            $siteBody.removeClass('o-hidden').removeClass(scrollClass);
                        }
                      }
                    }, 150);
                    
                    if ($dropMenu.hasClass('unfold')) {
                        if($headerWrapper.hasClass(scrollClass)){
                            $dropMenu.css("top", extMH);
                        }else{
                            if(Site.RWD.isMqMatching(['S', 'M']) && ($(window).scrollTop() < $(".header-wrap").height()) ){
                                menuTopPosition = $(".header-wrap").height();
                                menuBreadcrumbsHeight = $("ol.breadcrumbs").height()+5;
                                if(menuBreadcrumbsHeight > 5){
                                    menuTopPosition = menuTopPosition-menuBreadcrumbsHeight;
                                }
                                $dropMenu.css("top", menuTopPosition);
                                $foldMenuOverlay.css("top", menuTopPosition);
                            }else{
                                $dropMenu.css("top", "");    
                                $foldMenuOverlay.css("top", "");    
                            }                            
                        }
                    }else{
                        if(scrollPosition !== 0){
                            $head.css({top: -extH});
                            $('body').animate({scrollTop: scrollPosition}, 50);
                        }
                    }   
                    
                    if(!$siteBody.hasClass('o-hidden') && ((scrollPosition > headH) && $headerWrapper.hasClass(scrollClass))){
                            $siteBody.addClass('o-hidden');
                    }else{
                        $siteBody.removeClass('o-hidden');
                    }                    
                }
            });

            if(!$("#main-search").val().length){
                $("#main-search").blur();
            }
                            
        };
    };
    
    var _checkIfIE = function() {
        if (document.documentMode) {             
            $('body').addClass('userAgentIE');
        } else {
            return false;
        }
    };
    
    /**
     * Update 
     */
    var updateFPSUI = function(checkedSetting, checkedComp) {
        var checkedSetting = checkedSetting.val();
        var checkedComp    = checkedComp.val();
        
        $('label[for='+checkedSetting+']').addClass('selected');
        $('label[for='+checkedComp+']').addClass('selected');
        
    };
    
    var updateGameFPS = function(event) {
        if(!$(".font-spinner").length) {
            $('<span class="spinner egui fa fa-spinner fa-pulse any-1-1 align-center font-spinner"></span>').prependTo($(".fps-selector-results"));
        } 

        $('.fps-product-results').animate({opacity: 0}, 300, function() {
            $(this).slideUp({
                duration: 100,
                specialEasing: 'easeOutBounce'
            });
        });
        
        var url = globals.baseUrl + 'CC_RenderFPSGamingSelector-RenderProductSearch';
        var gameSelector = $('input[name=game_selected]');
        var settingSelect = $('input[name=game_name_setting]:checked');
        var categorySelect = $('input[name=computer_type]:checked');
        
        $('.inputs').removeClass('selected');
        
        var game = gameSelector.val();
        var setting = settingSelect.val();
        var settingForAttr = setting.toLowerCase();
        var settingAttrID = $('input[name=game_selected_'+ settingForAttr +']').val();
        var category = categorySelect.val();
        
        updateFPSUI(settingSelect, categorySelect);
                
        $.ajax({
           url : url,
           data : {
               SelectedCategory: category,
               SelectedGame: game + 'FPS score (' + setting + ')',
               SelectedRange: _options.sliderValue,
               SelectedAttr: settingAttrID,
               PageSize : $('input[name=return_page_size]').val()
           },
           dataType: 'html',
           method: 'POST',
           success: function(data) {
               $('.fps-product-results').html(data);
               $('.fps-product-results').animate({opacity: 1}, 400, function() {
                   $(this).slideDown({
                       duration: 500,
                       specialEasing: "easeInBounce"
                   });
                   $('.spinner').remove();
               });
           }
        });
    };
    
    /**
     * Set jQuery UI Slider to match styles
     */
    var initFPSslider = function() {
      var maxRange = parseInt($('.fps-slider').data('max-range'), 10);
      var isMobileDevice = getMobileOperatingSystem();
      
      if (isTouch() != "is-touch-device") {
          $('.show-value').hide();
          var handle = $('#custom-handle');
          
          $('.fps-range').slider({
              range:"min",
              value: 20,
              min: 0,
              step: 10,
              max: maxRange,
              animate: true,
              create: function() {
                  var textHTML = "<p>"+ $(this).slider("value")+"<br><span>FPS</span></p>"
                  handle.html( textHTML );
                  _options.sliderValue = 20;
               },
               slide: function( event, ui ) {
                 var textHTML = "<p>"+ ui.value +"<br><span>FPS</span></p>"
                 handle.html( textHTML );
                 _options.sliderValue = ui.value;
               }
          });
          
      } else {
          
          $('.fps-range').slider({
              range:"min",
              value: 20,
              min: 0,
              step: 10,
              max: maxRange,
              animate: true,
              create: function() {
                  _options.sliderValue = 20;
                  $('.show-value').html('<span>20 FPS</span>');
               },
               slide: function( event, ui ) {
                 _options.sliderValue = ui.value;
                 $('.show-value').html('<span>'+ ui.value +' FPS</span>')
               }
          });
      }
       
    };
    
    var updateInputs = function (passedSlide) {
        var $slides = $('.game-names').slick('getSlick').$slides;
        
        var game = $slides.eq(passedSlide).data('game');
        var basic = $slides.eq(passedSlide).data('basic');
        var ultra = $slides.eq(passedSlide).data('ultra');
        
        $('input[name=game_selected]').val(game);
        $('input[name=game_selected_ultra]').val(ultra);
        $('input[name=game_selected_normal]').val(basic);
    };
    
    /**
     * Handle FPS Special Filtering and Fetch new Data
     */
    var _initfpsFilterHandle = function() {
        var $form = $('#fps-form');
        var settings = $('input[name=game_name_setting]');
        var category = $('input[name=computer_type]');
        
        initFPSslider();
    };
    
    var showGameList = function(event) {
        var _gameDrop = $('.game-dropdown');
        var $el = document.getElementById('game-list');
        var $this = $(event.currentTarget);
        var currName = $this.data('game');
        
        event.stopPropagation();        
        gameAttr.forEach(function(element, index) {
            if (element.name != currName) {
                var optionEl = document.createElement('li');
                optionEl.textContent = element.name;
                optionEl.setAttribute('data-slide', index)
                $el.appendChild(optionEl);
            }
        });
        
        if (!$(event.target).closest('button').length) {
            if (!_gameDrop.hasClass('show')) {
                _gameDrop.addClass('show');
            } else {
                _gameDrop.removeClass('show');
            }
        }
    };
    
    var _listenForEvents = function() {

        var _body = $('body');
       
        _body.on('change', 'input[name=game_name_setting], input[name=computer_type]', updateGameFPS);
        
        _body.on('slidechange', '.fps-range', updateGameFPS);
        
        $('.game-slide').on('click', showGameList);
        
        _body.on('click', '.game-dropdown li', function(event) {
                var $this = $(event.currentTarget);
                var slideToJump = $this.data('slide');
                $('.game-names').slick('slickGoTo', slideToJump);
        });
        
        _body.on('click', function(event) {
            if (!$(event.target).closest('.game-drop-contain').length) {
                $('.game-dropdown').removeClass('show');
            }
            var $el = document.getElementById('game-list');
            
            while ($el.firstChild) {
                $el.removeChild($el.firstChild);
            }
        });
        
    }
    
    var _initializeQuickChange = function(games) {
        var currentName = '';
        var container = document.createElement('div');
        var $el = document.createElement('ul');

        $el.setAttribute('class', 'game-dropdown any-1-1');
        $el.setAttribute('id', 'game-list');
        
        container.setAttribute('class', 'game-drop-contain');
        container.setAttribute('tabindex', '-1');
        container.appendChild($el);
        
        $('.game-selector').append(container);
    };
    
    var _initGameFps = function(gamesList) {
        
        _initfpsFilterHandle();
        $('.game-names').slick({
            centerMode:true,
            slidesToShow: 1,
            centerPadding: 0
         });
        
         $('.game-names').on('beforeChange', function(event, slick, currentSlide, nextSlide) {
             
             updateInputs(nextSlide);
             $('.game-dropdown').removeClass('show');
             updateGameFPS();
         });
         
         updateInputs($('.game-names').slick('slickCurrentSlide'));
         _listenForEvents();
         _initializeQuickChange(gamesList);
         
         $('.game-names').removeClass('faded');
    };
    
    var bLazyRevalidate = function(){
        bLazy.revalidate();
    };
    
    return {
                
        out : out,
        outError : outError,
        dumpLogs : dumpLogs,
        assert : assert,
        typeOf : typeOf,
        enableDevMode : enableDevMode,
        getSessionStatus : getSessionStatus,
        decodeSessionStatus : decodeSessionStatus, 
        getParam : getParam,
        safeString : safeString,
        setCookie : setCookie,
        setCookieEncoded : setCookieEncoded,
        getCookieValue : getCookieValue,
        removeCookie : removeCookie,
        showCookieConsent : showCookieConsent,
        getHtmlWithAjax : getHtmlWithAjax,
        trackFilter : trackFilter,
        trackBasket : trackBasket,
        trackLink : trackLink,
        reportMappedAnalyticsEvent : reportMappedAnalyticsEvent,
        populateNewsletterEmail : populateNewsletterEmail,
        newsletterCheckbox : newsletterCheckbox,
        getMediaQuerySize : getMediaQuerySize,
        getLoggedInName : getLoggedInName,
        getItem : getItem,
        setItem : setItem,
        removeItem : removeItem,
        getSessionItem : getSessionItem,
        setSessionItem : setSessionItem,
        removeSessionItem : removeSessionItem,
        makeAjaxCall : makeAjaxCall,
        handleBarsHelpers : handleBarsHelpers,
        animationSupport : animationSupport,
        noHover : noHover,
        hideAjaxLoader : hideAjaxLoader,
        showAjaxLoader : showAjaxLoader,
        createSpinner: createSpinner,
        removeSpinner: removeSpinner,
        dropdownButton: dropdownButton,
        sellerRating: sellerRating,
        sellerName: sellerName,
        expandBox: expandBox,
        isTouch: isTouch,
        resetButton: resetButton,
        resetButtonLoading: resetButtonLoading,
        selectListWD: selectListWD,
        selectListCommon: selectListCommon,
        createParameterMap: createParameterMap,
        filterInt: filterInt,
        removeCardSessionObjects : removeCardSessionObjects,
        removeSessionSSN: removeSessionSSN,
        setElementToFixed: setElementToFixed,
        fixedMobileHeader: fixedMobileHeader,
        initGameFps: _initGameFps,
        bLazyRevalidate: bLazyRevalidate,
        checkIfIE : _checkIfIE,
        getMobileOperatingSystem : getMobileOperatingSystem
    };

}(this, Site));