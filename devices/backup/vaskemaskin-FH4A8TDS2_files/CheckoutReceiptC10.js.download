/**
 * Module CheckoutReceiptC10
 * Contains interactions related to the checkout 1.0 flow.
 */                 
Site.CheckoutReceiptC10 = (function (window, S, out, $, View) {
    
    /*
     * Handle request when subscribing to newsletter, create account or login from Receipt
     */
    var submitAction = function() {
        var $area = $('.receipt-interactions'),
            $box = $('.clean-box', $area)
            $bigSign = $('.big-sign.message', $area),
            $response = $('.response-box', $area),
            $actionText = $('.action-message' , $area),
            $newsletterText = $('.newsletter-message' , $area),
            $form = $('#reciept-interactions-form', $area),
            $closeButton = $('.close-button')
            url = $form.attr('action');

        
        $('body').on('submit', '#reciept-interactions-form', function (event) {
            
            event.preventDefault();
            Site.Common.createSpinner($('.form-content'));
            postData = $form.serializeArray();
            
            var request = $.ajax({
                url: url, 
                data: postData,
                method: 'POST'
            });
            
            request.done(function(data, status, xhr) {
                if (data.hasOwnProperty('error')) {
                    globals.validationErrors = {
                        "formErrors" : { 
                            "id" : "reciept-interactions-form", 
                            "description" : data.error.message
                        }
                    };
                    S.Validation.init();
                }
                else if (data.hasOwnProperty('success')) {
                 
                    if (data.success.hasOwnProperty('newsletterOnly')) {
                        $newsletterText.show();
                        $actionText.hide()
                    }
                    else {
                        $newsletterText.hide();
                        $actionText.show();
                        $closeButton.remove();
                        _.delay(function() {                    
                            $box.outerHeight($box.outerHeight());
                            $form.remove();
                        }, 2000);
                        
                    }
                    $bigSign.addClass('closed');
                    $response.addClass('open');
                }
                else if (!xhr.responseJSON) {
                    $bigSign.addClass('closed');
                    $response.addClass('open');
                }
            });
            
            request.fail(function(data) {
                globals.validationErrors = {
                    "formErrors" : { 
                        "id" : "reciept-interactions-form", 
                        "description" : globals.reciept.requestError
                    }
                };
                S.Validation.init();
            });
            
            request.always(function() {
                Site.Common.removeSpinner();
            });
            
            return request;
            
        });
    }
    
    /*
     * Revert the succesfull response-message
     * This might be removed before deploy
     */
    var closeResponse = function() {
        var $area = $('.receipt-interactions'),
            $bigSign = $('.big-sign.message', $area),
            $response = $('.response', $area);
        $('body').on('click', '.receipt-interactions .close-button', function (event) {
            $response.removeClass('open');
        });
    }
    
    /*
     * Removes the password strength-validation when password is empty
     */
    var resetPasswordCheck = function() {
        var $field = $('.new.profile #BillingAddress_Password'),
            $notification = $('.new.profile .passwordMessage');
        if ($field.length) {
            $('body').on('keyup', $field, function (event) {
               var $message = $('.new.profile .testresult');
               if (!$field.val().length) {
                   $notification.removeClass('open');
                   _.delay(function() {                    
                       $message.remove();
                   }, 500);
               } else if (!$notification.hasClass('open')) {
                   $notification.addClass('open');
               }
            });
        }
    }
   
   /*function that Checks both inputfield & the checkbox is hasValue/checked
    * if hasValue/Checked the Button is enabled 
    * if not the Button is disabled
    */
    var checkFields = function() {
        var $anonymousBtn = $('#anonymous-newsletter'),
            $newsletterCheckBox = $('#AddressForm_NewsletterCheckBox'),
            $newUserInputField = $('#BillingAddress_Password');
    
            if(!$newsletterCheckBox.is(':checked') && !$newUserInputField.val().length){
                    $anonymousBtn.attr("disabled", true);
                }else{
                    $anonymousBtn.attr("disabled", false);
                }
        }
       
    // init listeners that calls check fields function 
        var initEventListeners = function() {
            var $newsletterCheckBox = $('#AddressForm_NewsletterCheckBox');
                
            $newsletterCheckBox.click(function() {
                checkFields();
            });     
            
            $('body').on('keyup', '#BillingAddress_Password', function(){
                checkFields(); 
            });
        }
        
        
    var rememberMe = function(){
        var $field = $('#remember-me-result');
        if($field.length > 0) {
            Site.Common.setCookieEncoded('AnonymousSessionID', $field.data('session-id'));
        }
     }
    
         /*
     * Santander payment popup
     */
   var  santanderPopup = function() {
        var $this = $('#santander-payment-popup');

        if($this.length) {
            Site.Popup.loadByJQuery($this.attr('title'), $this, true);
        }
    }
     

    var init = function () {
        out('Initiating CheckoutReceipt 1.0...');
        
        resetPasswordCheck();
        submitAction();
        closeResponse();
        rememberMe();
        initEventListeners();
        santanderPopup();
        
    };
    
    return {
        init : init
    };
    
}(this, Site, Site.Common.out, jQuery, Site.View));