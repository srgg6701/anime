Site.Slider = (function (window, S, out, $) {
	
	var _royalSliders = [],    
	    _newsSliders,
	    _productSliderObj = {},    
	    _miniProductHeight, 
	    _prodWidth, 
	    _$siteWrapper,
		_currSlider = 0, 
		_productSliders = [],
		_allProducts = {},
		_productSliderOpts = { 
	        numImagesToPreload : 2,
			arrowsNavAutoHide : false,
			loop : true,
			controlNavigation : 'none',
			navigateByClick: false
		};

    /**
     * Get options for creating the royal sliders
     * @param {String} type the type of the royal slider ('banner' or 'product' sliders)
     * @param {Object} sliderObj is a slider object
     * @returns {options} the options
     */
	var getOptions = function (type, sliderObj) {
		var opts;
		
		if(type === 'banner' || type === 'news-slider') {
			
			var sliderId = $(sliderObj).attr('id'),
				sliderOptsArray = S.Config.globals.sliderOptionsArr,
				index = 0;
				
			while(sliderOptsArray.length > index){
				
				if(sliderId === sliderOptsArray[index].identifier){
	                //Don't display any navigation bullets if the slider only has one slide. 
	                if(sliderObj.childElementCount <= 1) { sliderOptsArray[index].options.controlNavigation = 'none'; }
				    
					opts = sliderOptsArray[index];
					$(sliderObj).data('rsOptions', opts);
					break;
				}
				index++;				
			}
		} else {
			opts = {
			    options: _productSliderOpts
			};
			
			$(sliderObj).data('rsOptions', opts);
		}
		return opts;
	};
	
	
	var handleImageInjections = function (slider, forceInject) {
		var injectImagesForSlide = function (slide) {
			slide.content.find('div.slider-img').replaceWith(function () {				
				return '<img class="b-lazy" src="https://tubby.scene7.com/is/image/tubby/none?$digital220x220$" data-src="' + $(this).text() + '" alt=""/>';
			});			
						
			slide.content.find('div.slider-img-icon').replaceWith(function () {
				return '<img src="' + $(this).text() + '" class="bundle-icon" alt=""/>';
			});		
			
			slide.isInjected = true;
		};
		
		// On page load, we need to fetch the images for the first slide.
		injectImagesForSlide(slider.currSlide);
		  
		slider.ev.on('rsBeforeAnimStart', function(event) {
			var _currSlider = _royalSliders[slider.currentIndex],
				currSlide = _currSlider.currSlide;
			
		  	// Slide has not been injected with images, do it now.
			if (!currSlide.isInjected || forceInject) {
				injectImagesForSlide(currSlide);
			}

		});
	};
	
	var getContainerWidth = function ($slider, type) {
		type = type || 'product';
		var margin = (type === 'product' ? 20 : 0);
		return parseInt($slider.parent().width()) - margin;
	};
	

    /**
     * Get the width of the slider and use that as the base to calculate the number of products we can fit into it.
     * @Per Nygren 170112
     */
    var getProductsPerSlide = function(slider, containerWidth) {
        var containerWidth = containerWidth || getContainerWidth(slider, 'product'),
            prodsPerSlide = Math.round(containerWidth / _prodWidth);
        
        if (prodsPerSlide < 1) { prodsPerSlide = 1; } // Avoid division by zero error.
        
        return prodsPerSlide;
    }	
	
	var prepareProductSlider = function ($slider, slides) {
		var numProds, 
		    $prods,
		    prodsPerSlide = $slider.data('prodsPerSlide'),
		    sliderId;
		
		 // If the slider has an ID attribute - use that as the key. 
		if($slider.attr('id')) {
		    sliderId = $slider.attr('id');
		}
		// Else, if the ID is set as data attribute.
		else if($slider.data('sliderId')) {
		    sliderId = $slider.data('sliderId');
		}
		// No ID - use Underscore.js uniqueId function to generate one.
		else {
		    sliderId = _.uniqueId('product_slider_');
		    $slider.data('sliderId', sliderId);
		}  

		// Store the products in each slider for later use. I.e when products per slide change.
		if(typeof _productSliderObj[sliderId] === 'undefined') {
		    _productSliderObj[sliderId] = $slider.find('div.mini-product');
		}
		
		$prods = _productSliderObj[sliderId];		
		
		if (!$slider.data('numProds')) {
			numProds = $prods.length;
			$slider.data('numProds', numProds);
		}
		else {
			numProds = $slider.data('numProds');
		}

		var totProdWidth = _prodWidth * numProds,
			prodCount = 0,
			sliderHtml = $('<div/>');
				
		if ((numProds / prodsPerSlide) <= 1) {
		    numSlides = numProds;
		} 
		else {
		    numSlides = Math.ceil(numProds / prodsPerSlide);
		}
		
		for (var i = 0; i < numSlides; i++) {
            if (typeof $prods[prodCount] !== 'undefined') {
                var slideHtml = $('<div/>', { 'class': 'rsContent' });
                
                for (var j = 0; j < prodsPerSlide; j++) {
                    var $currProd = $prods.eq(prodCount);
                    
                    if (!$currProd.length) { break; }
                    
                    var prodId = 'slider' + _currSlider + 'slide' + i + 'prod' + j;
                                            
                    $currProd.attr('id', prodId);
                    
                    // Save the product HTML for later, in case we need to re-init the slider, on resize for example. 
                    // TODO: Can this be removed? I don't think this ever is used. @Per Nygren
                    if (!_allProducts[prodId]) {
                        _allProducts[prodId] = $currProd;
                    }
                    
                    slideHtml.append($currProd);
                    prodCount++;
                }
            }
            sliderHtml.append(slideHtml);
		}
		
		_currSlider++;
	  	
	  	return $slider.html(sliderHtml.children());
	};
	
	
	var resetProductSlider = function (slider) {
		var $slider = slider.slider,
		    rs = $slider.data('royalSlider'),
			royalSliderOptions = $slider.data('rsOptions'),
			currentIndex = rs.currentIndex;
		
		if (!rs.destroy) { return false; }
		
		rs.destroy(); // Clean up previous slider instance.
		
		// Setup a new slider.
	    rs = prepareProductSlider($slider, slider.slides).royalSlider(_productSliderOpts).data('royalSlider');
		
		if (rs.numSlides === 1) { // Only one slide, no need for navigation.
			$slider.find('.rsNav').addClass('disp-none');
		}
		
		rs.injectImages = true;
		rs.currentIndex = currentIndex;
		_royalSliders[currentIndex] = rs;
		rs.currSlide && handleImageInjections(rs, true);
		return rs;
	};
	
	
	var resetBannerSlider = function ($slider, allOptions) {
		
		var rs = $slider.data('royalSlider'), 
			originalHtml = $slider.data('originalHtml'),
			sliderWidth = $slider.parent().width(),
			ratio = allOptions.width / allOptions.height,
			sliderHeight = parseInt(sliderWidth / ratio, 10),
			currentIndex = rs.currentIndex; 
		  
		if (!rs.destroy) { return false; }
		
		rs.destroy(); // Clean up previous slider instance.
		  
		$slider.html(originalHtml)
			.css({ 
				'width' : sliderWidth + 'px', 
				'height' : sliderHeight + 'px' 
			});
		  
		rs = $slider.royalSlider(allOptions.options).data('royalSlider');
		rs.currentIndex = currentIndex;
		_royalSliders[currentIndex] = rs;
		attachVideoHandlers(currentIndex);
		return rs;
	};
	
	
	/**
	 * Attaches click event handler for video slides associated with the slider at the specified index. 
	 */
	var attachVideoHandlers = function(index) {
		var $thisSlider = _royalSliders[index].slider,
			thisInstance = $thisSlider.data('royalSlider');
	  
		thisInstance.ev.on('rsOnCreateVideoElement', function(e, url) {
			thisInstance.videoObj = $('<iframe src="'+url+'" frameborder="0" scrolling="no" class="video-iframe"></iframe>');
			$thisSlider.addClass('video-playing');
		});
		
		thisInstance.ev.on('rsVideoStop', function() {
			$thisSlider.removeClass('video-playing');
		});
	};
	
	var refreshDimensions = function (containerWidth, sliderWidth, sliderHeight, $sliderObj, isBanner) {
		var ratio = sliderWidth / sliderHeight,
			newHeight = isBanner ? sliderHeight : parseInt(containerWidth / ratio);

		$sliderObj
			.width(containerWidth + 'px')
			.height(newHeight + 'px')
			.find('.rsOverflow')
			.width(containerWidth + 'px');
		$sliderObj.find('.rsOverflow .rsArrow').height(newHeight + 'px');

	};
	  

    /**
     * To initialize royal sliders on each page.
     * This function is handling to create banner sliders 
     * and product sliders (products from both Enfinity and Adobe recommendation)  
     * @returns (void)
     */
	var initRoyalSliders = function() {

		globals.perfTimer.royalSliderInit = new Date();

		// Remove resize event in Royal Slider namespace. This event will otherwise be bound multiple times when loading a slider via AJAX. E.g when filtering. 
		$(window).off('resize.rs');
		
		var $sliders = $('.royalSlider'),
			i = 0,
			sliderObj,
			$sliderObj,
			bannerContainerWidth,
			productContainerWidth,
			bannerContainerWidth,
			type,
			sliderOptionsObject,
			royalSliderOptions;
		
		if (!$sliders.length) {
			return false;
		}
		else {
		    
			_royalSliders = [];
			_$siteWrapper = $('#site-wrapper');
			_$siteWrapper.data('lastWidth', _$siteWrapper.width());
			
			var miniProductTemplate = $sliders.find('div.mini-product').eq(0);
			
			_miniProductHeight = (parseInt(miniProductTemplate.css('height'), 10)+50);

			_prodWidth = miniProductTemplate.outerWidth();
			
			while($sliders.length > i) {
				var slider;
				 
				if($sliders.length === 1) {
					sliderObj = $sliders;
				} else {
					sliderObj = $sliders[i];
				}
				
				$sliderObj = $(sliderObj);
				
				// if the slider is a product slider, it contains the 'recommendSlider' css class 
				type = $sliderObj.hasClass('recommendSlider') ? 'product' : 'banner';
				
			  if (type === 'product') {

			      productContainerWidth = productContainerWidth || getContainerWidth($sliderObj, type);			      
			      var prodsPerSlide = getProductsPerSlide($sliderObj, productContainerWidth);
			      
			      // Set the number of products we're able to to show per slide as a data attribute. 
			      $sliderObj.data('prodsPerSlide', prodsPerSlide);
				  
				  var ps = prepareProductSlider($sliderObj);
				  var sliderHeight = _miniProductHeight+50;
				  ps.height(sliderHeight);
				  slider = ps.royalSlider(_productSliderOpts).data('royalSlider');
				  ps.find('.rsOverflow .rsArrow').height(sliderHeight);
				  
				  if (ps.find('div.slider-img').length) {
					  slider.injectImages = true;
				  }
				  
				  if (slider.numSlides === 1) {
					  ps.find('.rsNav').hide();
				  }
				  
				  _productSliders.push(ps);
			  } else {
			      sliderOptionsObject = getOptions(type, sliderObj);
			      royalSliderOptions = sliderOptionsObject.options;
	              
			      var sliderWidth = sliderOptionsObject.width,
			          sliderHeight = sliderOptionsObject.height;
			      
				  $sliderObj.data('originalHtml', $sliderObj.html());
				  bannerContainerWidth = bannerContainerWidth || getContainerWidth($sliderObj, type);
				  refreshDimensions(bannerContainerWidth, sliderWidth, sliderHeight, $sliderObj);
				  slider = $sliderObj.royalSlider(royalSliderOptions).data('royalSlider');				  
			  }
			  
			  slider.type = type;
			  slider.options = sliderOptionsObject;
			  slider.lastWidth = slider.slider.width();
			  _royalSliders[i] = slider;

			   /*
			    * For a product slider:
			    * Product sliders for category level1 and product detail pages. 
			    * Only the products on the first slide are fetched but not all of them.
			    * The rest will be fetched when an user presses next/prev arrows to see more products.
			    * So, the following statement is handling this.
			    */
			  if(type === 'product' && slider.injectImages) {
				  slider.currentIndex = i;
				  handleImageInjections(slider);
			  }  
			  else if(type === 'banner') {				  
				  attachVideoHandlers(i);
			  }
			  i++;
			}
			
			handleSliderResize();
			handleMiniProductHover();
			
			globals.perfTimer.royalSliderInit = new Date() - globals.perfTimer.royalSliderInit;			
		}
		
		// Get lazy images
        setTimeout(function(){
            Site.Common.bLazyRevalidate();
        }, 150);
		
		$("body").on('click', '.royalSlider .rsArrow', function() {
		    setTimeout(function(){
		        Site.Common.bLazyRevalidate();
		    }, 500);
		});
		
	};
	
	var initNewsSliders = function(){
		out('initNewsSliders');
		var $sliders = $('.lof-slidecontent');
		
		// a page having news slider(s) will contain the 'lof-slidecontent' css class 
		if($sliders.length){
			var i = 0, sliderObj;
				
			_newsSliders = [];
			
			while($sliders.length>i) {				 
				if($sliders.length==1) {
					 sliderObj = $sliders;
				} else {
					 sliderObj = $sliders[i];
				}
				
				$(sliderObj).lofJSidernews(getOptions('news-slider',sliderObj).options);
				i++;
			}
		}
	};
	
	var updateSliderSizes = function(){
	    $sliders = $('.royalSlider');

        sliderObj = $sliders;
        //TODO: Update with correct obj
        $sliderObj = $(sliderObj);
        
        
	    bannerContainerWidth = getContainerWidth($sliderObj, "product");
        sliderOptionsObject = getOptions("product", sliderObj);
        royalSliderOptions = sliderOptionsObject.options;
        sliderWidth = $sliderObj.width();
        
        sliderHeight = $sliderObj.find(".mini-product .mini-product-content").height()+50;
	    refreshDimensions(bannerContainerWidth, sliderWidth, sliderHeight, $sliderObj);
	}
	
	var handleMiniProductHover = function() {
	    // TODO: Are these events bindings really necessary - can't we use CSS :hover for this? @Per Nygren
        var $rProds = $('div.box.recommended-products');
        
        if ($rProds.length) {
            var addHover = function(e) {
                $(e.delegateTarget).addClass('hover');
            }    
            
            var removeHover = function(e) {
                $(e.delegateTarget).removeClass('hover');
            }  
            
            $rProds.off('mouseenter', 'div.mini-product', addHover)
                    .on('mouseenter', 'div.mini-product', addHover);
                
            $rProds.off('mouseleave', 'div.mini-product', removeHover)
                    .on('mouseleave', 'div.mini-product', removeHover);
        }
	}
	
	var handleSliderResize = function() {
	    var refreshTimer;
	    
	    $(window).on('resize.rs', function () {
            clearTimeout(refreshTimer);
            refreshTimer = setTimeout(function () {
                
                var slider, 
                    siteWrapperWidth = _$siteWrapper.width(), 
                    l = _royalSliders.length;                       
                
                if(siteWrapperWidth === _$siteWrapper.data('lastWidth')) {
                    return false;
                } 
                else {
                    _$siteWrapper.data('lastWidth', siteWrapperWidth);
                }
                
                _prodWidth = $('div.royalSlider div.mini-product').first().outerWidth();
                                    
                for (var i = 0; i < l; i++) { 
                    slider = _royalSliders[i];                                              
                    var $slider = slider.slider;
                    
                    if (slider.type === 'banner') {
                        resetBannerSlider($slider, slider.options);
                    }
                    // Only reset the product sliders if the number of products that can fit in the slider has changed.
                    else {
                        var currentProdsPerSlide = getProductsPerSlide($slider);

                        // We don't need to manipulate the HTML if prodsPerSlide hasn't changed.
                        if ($slider.data('prodsPerSlide') && $slider.data('prodsPerSlide') === currentProdsPerSlide) {
                            return $slider;
                        }
                        else { 
                            $slider.data('prodsPerSlide', currentProdsPerSlide);
                            resetProductSlider(slider);
                        }

						// Set arrows height 
                        $slider.find('.rsOverflow .rsArrow').height($slider.height());                           
                    }
                }
                
            }, 300);
        });
	}
	
    return {
        
        /** 
         * Initial Royal sliders (both banner and product sliders)
         * @returns {void}
         */
        initRoyal : initRoyalSliders,
        
        
        /** 
         * Initial News sliders
         * @returns {void}
         */
        initNews : initNewsSliders,
        
        updateSliders : updateSliderSizes,
        
        /**
		 * @returns {Array} List of initiated product sliders.
		 */
        getProductSliders : function () {
        	return _productSliders;
        },
        
        getAllProducts: function () {
        	return _allProducts;
        }
        
    };
	
}(this, Site, Site.Common.out, jQuery));