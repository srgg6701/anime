Site.SAYT = (function (window, S, out, $) {
    
    var hitTypes = {
        brand : 'brand',
        category : 'category',
        product : 'product',
        content : 'content',
        store : 'store'     
    };
    
    var $searchField, $suggestionsBox, $suggestionsCategory, $suggestionsSeller, $suggestionsBrand, $suggestionsProduct, $suggestionsContent, $suggestionsStore, searchFieldName, $searchForm, $searchResultTab,
    $leftColumn, $rightColumn, $leftColumnItems, $rightColumnItems, hasResults = false,
        _numResults = 0,
        resultsCache = [];
        
    /**
     * Determine the value of the "searchResultTab" request parameter
     * based on the "type" attribute of the <query> element of the suggest
     * search result. The result is written by CC_SuggestResult.isml 
     */
    var getSearchResultTab = function (type) {
        switch (type) { 
            case hitTypes.brand : 
                return "Products"; break;
            case hitTypes.category : 
                return "Products"; break;
            case hitTypes.seller : 
                return "Products"; break;
            case hitTypes.product : 
                return "Products"; break;
            case hitTypes.content : 
                return "Content"; break;
            case hitTypes.store : 
                return "Stores"; break;
            default : return "Products"; } // Unknown type.
    };
    
    /**
     * initialize the suggest box.
     */
    var init = function(){
        var actionTimeout, // Timer, controlling when to fire the request.
            typingDelay = 500, // Ms after which we send a search request, to avoid spamming.
            minInputChars = 2; // After how may characters of typing should we start suggesting?
        $searchResultTab = $('#searchResultTab');
        // Fixed mobile header - ECOM-16746
        var scrollUpFn = function() {
                if(S.RWD.isMqMatching(['M','S'])) {
                    $('body').animate({scrollTop: 0}, 400);
                    if($('#site-wrapper').hasClass("fixed-header")){
                        $('body').removeClass('o-hidden');
                    }
                }
            };
        $searchField = $('#main-search').on({
            
            keyup: function(key) {
                var $this = $(this);
                var $activeItem = $('.suggestion-item.active');
                var activeIndex = $activeItem.length ? $activeItem.index() : false;
                
                clearTimeout(actionTimeout); // User is still typing - reset the timer.
                
                if ($this.val().length < minInputChars) { 
                    closeSuggestions();
                    return false; 
                }
                
                var inputTerm = escapeInputTerm();
                
                // Check if the result for this input term is already cached.
                for (var i = 0; i < resultsCache.length; i++) {
                    if (resultsCache[i].term === inputTerm) {
                        out('Showing cached results.');
                        showResults(resultsCache[i]);
                        return true;
                    }
                }

                // If the user has not typed for a while, request the suggestions.
                actionTimeout = setTimeout(loadSuggestions, typingDelay); 
            },

            keydown : function (key) {
                
                var $items = $('.suggestion-item'),
                    $activeItem = $items.filter('.active'),
                    activeIndex = $activeItem.length ? parseInt($activeItem.attr('data-list-index')) : false,
                    columnIndex = $activeItem.attr('data-column-index'),
                    twoColumns = S.RWD.isMqMatching(['L','XL']) && $leftColumn.is(':visible') && $rightColumn.is(':visible');
                    if (hasResults) {
                        switch (key.keyCode) {
                            case 13:  // Enter.
                                if ($activeItem.length) {
                                    $searchField.val($activeItem.attr('data-term'));
                                }
                                break;
                            case 38: // Arrow up.
                                if (activeIndex !== false) {
                                    activeIndex--
                                    $leftColumnItems.first()
                                    if (activeIndex !== false) {
                                        if (activeIndex === 0 && twoColumns) {
                                            activeIndex = $leftColumnItems.last().attr('data-list-index');
                                            $items.removeClass('active');
                                            $('.suggestion-item[data-list-index="'+activeIndex+'"]').addClass('active');
                                        }
                                        else if (activeIndex === 0 || (twoColumns && $leftColumnItems.first().hasClass('active'))) {
                                            activeIndex === false;
                                            $items.removeClass('active');
                                        }
                                        else if (activeIndex !== false) {
                                            $items.removeClass('active');
                                            $('.suggestion-item[data-list-index="'+activeIndex+'"]').addClass('active');
                                        }
                                    }
                                }
                                break;
                            case 40: // Arrow down.
                                if (activeIndex === false || activeIndex >= $items.length) { // Set first item to active.
                                    if(twoColumns && activeIndex !== $items.length) {
                                        activeIndex = $leftColumnItems.first().attr('data-list-index');
                                    } else {
                                        activeIndex = 1;
                                    }
                                }
                                else { activeIndex++; }
                                
                                $items.removeClass('active');
                                $('.suggestion-item[data-list-index="'+activeIndex+'"]').addClass('active');
                                break;
                            case 39: // Arrow right
                                moveToSide($rightColumn, $items, $activeItem, activeIndex, columnIndex);
                                break;
                            case 37: // Arrow left
                                moveToSide($leftColumn, $items, $activeItem, activeIndex, columnIndex);
                                break
                        }
                    }
                    
                if(S.RWD.isMqMatching(['S'])){
                    $(".master-head .top .col.utils").addClass("search-focused");
                }
                    
            },

            blur : function () {
                setTimeout(closeSuggestions, 300);
                
                setTimeout(function(){
                    $(".master-head .top .col.utils.search-focused").removeClass("search-focused");
                },150);
            },
            
            focus : function () {
                (hasResults && $searchField.val()) && $suggestionsBox.show();
                $(".menu-trigger.unfold, .fold-menu.dropdown.unfold, #fold-menu-overlay.unfold, nav.fold-menu.unfold").removeClass("unfold");

                if(S.RWD.isMqMatching(['S'])){
                    $(".master-head .top .col.utils").addClass("search-focused");
                }

                // Fixed mobile header - ECOM-16746
                scrollUpFn();

            },
            
            click : function () {
                if(S.RWD.isMqMatching(['S'])){
                    $(".master-head .top .col.utils").addClass("search-focused");
                }
               
                // Fixed mobile header - ECOM-16746
                scrollUpFn();
                
            }
            
            
        });

        var $butSearch = $('.master-head .search .button-wrap');
        $.fn.positionSuggestBox = function () {
            var sbw = $butSearch.outerWidth(),
                isMobile = S.RWD.isMqMatching(['S']),
                $this = $(this);
            
            if (!isMobile) {
                $this.width($searchField.outerWidth() - sbw - 2);
            }
            
            return $this.offset({
                top : parseInt($searchField.offset().top, 10) + 40,
                left : isMobile 
                    ? 0 
                    : parseInt($(window).width()/2 - ($suggestionsBox.width() / 2) - (sbw/2), 10)
            });
        };
        
        $suggestionsBox = $('#suggestion-box');
        $suggestionsCategory = $('.categories', $suggestionsBox);
        $suggestionsBrand = $('.brands', $suggestionsBox);
        $suggestionsSeller = $('.seller', $suggestionsBox);
        $suggestionsProduct = $('.products', $suggestionsBox);
        $suggestionsContent = $('.content', $suggestionsBox);
        $suggestionsStore = $('.stores', $suggestionsBox);
        $leftColumn = $('.left-column', $suggestionsBox);
        $rightColumn = $('.right-column', $suggestionsBox);
        searchFieldName = $searchField.attr('name');
        $searchForm = $searchField.closest('form');
        S.RWD.addOnResize(onResize);

        $suggestionsBox.on('click', '.suggestion-item', function (event) {
            var current = $(this);
            
            event.preventDefault();
            closeSuggestions();
            $searchResultTab.val(current.attr('data-tab'));
            $searchField.val(current.attr('data-term'));
            if(current.attr('href') === '#'){
                $searchForm.submit();
            }else{
                // ECOM-16971: redirect on link defined for the suggestion
                window.location.href = current.attr('href');
            }
        });
        
        // Add 'active' class to hovered items.
        $suggestionsBox.on('hover', '.suggestion-item', function (event) {
            var $hoveredItem = $(this);
            if (event.type === 'mouseenter') {
                $hoveredItem.siblings().removeClass('active');
                $hoveredItem.addClass('active'); 
            }
            else if (event.type === 'mouseleave') { $(this).removeClass('active'); }
        });
        
    };
    
    /**
     * ECOM-14041 We need to escape the input-term for use in keyup function, otherwise it won't match search-result if containing special characters
     **/
    var escapeInputTerm = function() {
        // Escape some characters.
        return $searchField.val().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };
    
    /**
     * Going to another search suggestions with the side-arrows
     * @object direction (left or right column) 
     * */
    var moveToSide = function(direction, $items, $activeItem, activeIndex, columnIndex){
        if(S.RWD.isMqMatching(['L','XL']) && $leftColumn.is(':visible') && $rightColumn.is(':visible')) {
            if ($rightColumn.has($activeItem) && activeIndex !== false) {
                $items.removeClass('active');
                var $otherColumnResult = $('.suggestion-item[data-column-index="'+columnIndex+'"]', direction);
                if ($otherColumnResult.length) {
                    $($otherColumnResult).addClass('active');
                }
                else {
                    $('.suggestion-item', direction).last().addClass('active');
                }
            }
        }
    };
    
    var closeSuggestions = function () {
        return $suggestionsBox.hide();      
    };
    
    var onResize = function() {
        closeSuggestions();
        setTimeout(function(){
            $suggestionsBox.attr('style', '');
            $suggestionsBox.positionSuggestBox();
        }, 500);
    };
    
    var showResults = function (results) {
        var items = results.items;

        // All items have been prepared - reset box and show the new results.
        var l = items.length, type, searchElem = {category: [], brand: [], seller: [], product: [], content: [], store: []};
        
        _numResults = 0;
        
        for (var i = 0; i < l; i++) {
            searchElem[items[i].type].push(items[i].jQuery);
            _numResults++;
        }
        
        // Update each typeBox
        var showResults =  function($typeBox, jQElems) {
            $typeBox.hide().append(jQElems);
            if (jQElems.length !== 0 ) {
                $typeBox.show();
            }
        };
        
        //Remove all previous suggestions
        $('.suggestion-item', $suggestionsBox).remove();
         
        //Add suggestions per type
        showResults($suggestionsCategory, searchElem.category);
        showResults($suggestionsBrand, searchElem.brand);
        showResults($suggestionsSeller, searchElem.seller);
        showResults($suggestionsProduct, searchElem.product);
        showResults($suggestionsContent, searchElem.content);
        showResults($suggestionsStore, searchElem.store);
        
        $leftColumnItems = $('.suggestion-item', $leftColumn);
        $rightColumnItems = $('.suggestion-item', $rightColumn);
        
        $('.suggestion-item', $suggestionsBox).attr('data-list-index', function(i){
            return (i+1);
        });
        
        $leftColumnItems.attr('data-column-index', function(i){
            return (i+1);
        });
        
        $rightColumnItems.attr('data-column-index', function(i){
            return (i+1);
        });
        
        //Handle right and left column if one is empty or not
        if(S.RWD.isMqMatching(['L','XL'])) {
            if(!$rightColumnItems.length || !$leftColumnItems.length){
                if($leftColumnItems.length && !$rightColumnItems.length){
                    $leftColumn.removeClass("disp-none");
                    $rightColumn.addClass("disp-none");
                }
                else {
                    $rightColumn.removeClass("disp-none");
                    $leftColumn.addClass("disp-none");
                }
            }else{
                $leftColumn.add($rightColumn).removeClass("disp-none");
            }
        }
        
        $suggestionsBox
            .show()
            .positionSuggestBox(); // Yes, this needs to happen last.
    };
    
    
    /**
     * Handles XML data (from a previous request) and assembles the suggestions box.
     */
    var handleResponse = function(data, inputTerm) {
        var q, t, searchResultTab,
            maxNumHits = 20, // Max number of hits to show in the list.
            queries = $(data).find('query'), // Fetch an array of results from the XML response.
            resultItems = { term: inputTerm, items: [] };
        
        if (queries.length) {
            out('Got ' + queries.length + ' matching items.');
            hasResults = true;
        }
        else {
            out('No matches - bailing out.');
            hasResults = false;
            return false;
        }
        
        /* Returns appropriate icon element or image. */
        var getSuggestThumb = function (type, url) {
            if (url) {
                return '<img alt="" class="thumb" src="' + url + '"/>';
            } 
            else {
                return '<span class="thumb ' + (type.toLowerCase() === 'store' ? 'store' : 'content') + '"></span>';
            }
        };
        
        /* Returns a highlighted matched term in the result text. */
        var getSaytTerm = function (term, result) {
            return result.replace(new RegExp("(" + term + ")", "ig"), '<span class="highlighted-term">$1</span>');
        };
        
        var cacheResult = function (results) {
            var inputTerm = results.term;
            for (var i = 0; i < resultsCache.length; i++) {
                if (resultsCache[i].term === inputTerm) {
                    out(inputTerm + ' is already cached.');
                    return false;
                }
            }
            resultsCache.push(results);
            return true;
        };
        
        // Iterate all suggestions and then display them in the box.
        for (var i = 0; i < queries.length; i++) {
            if (i >= maxNumHits) {
                break;
            }
            q = $(queries[i]);
            t = q.text();
            searchResultTab = getSearchResultTab(q.attr('type'));
            
            resultItems.items.push({
                jQuery: $('<a/>', {
                    // ECOM-16971: define redirect link for the suggestion
                    href : ((q.attr('targetURL') !== undefined) && (q.attr('targetURL') !== false)) ? q.attr('targetURL') :'#',
                    'class' : 'suggestion-item',
                    html : (q.attr('type') === 'product' ? getSuggestThumb(searchResultTab, q.attr('imageURL')) : '') + 
                        '<span class="term">' + t + '</span>'
                }).attr({
                    'data-term': t,
                    'data-tab': searchResultTab
                }),
                saytText: t,
                type: q.attr('type')
            });
            
        }
    
        out('Done creating result box, showing results.');
        showResults(resultItems);
        cacheResult(resultItems);
    };
    
    var loadSuggestions = function() {
        
        var inputTerm = escapeInputTerm();
        
        out('Requesting SAYT results from ' + S.Config.globals.saytUrl);
        out(searchFieldName + "=" + inputTerm);
        
        $.ajax({
            url: S.Config.globals.saytUrl,
            data: searchFieldName + "=" + inputTerm,
            async: false,
            type: 'POST',
            dataType: "xml",
            success: function(xmlData) {
                handleResponse(xmlData, inputTerm);
            }
        });
    };
    
    
    return {
        init : init,
        
        resetSuggestions : function () {
            return $suggestionsBox.hide().empty();
        },
        
        closeSuggestions : closeSuggestions,
        handleResponse : handleResponse,
        
        positionSuggestBox : function () {
            return $suggestionsBox.positionSuggestBox();
        }
    };
    
}(this, Site, Site.Common.out, jQuery));